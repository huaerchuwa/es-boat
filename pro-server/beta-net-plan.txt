(0 e 0 ((Island :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteIsland")
(1 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval13490$fn__13491 0x761d4f3c "clojure.core$eval13490$fn__13491@761d4f3c"]) "as:RetractObsoleteIsland" 12 (:?fids) #object[clojure.core$eval13494$fn__13495 0x435ff169 "clojure.core$eval13494$fn__13495@435ff169"])
(2 e 2 ((NamedObject :? :? :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteObjects")
(3 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval13498$fn__13499 0x58f78a55 "clojure.core$eval13498$fn__13499@58f78a55"]) "as:RetractObsoleteObjects" 12 (:?fids) #object[clojure.core$eval13502$fn__13503 0x4144f4fb "clojure.core$eval13502$fn__13503@4144f4fb"])
(4 e 1 ((OSMData :? :?crd1 :?rad :?tim1 :?vol) nil nil) "as:CheckOSMData")
(5 x 3 ((Question :? :?crd2 :? :? :? :? :? :? :? :?tim2) (:?tim2 :?crd2 :?vol :?crd1 :?tim1) #object[clojure.core$eval13506$fn__13507 0x219606b "clojure.core$eval13506$fn__13507@219606b"]) "as:CheckOSMData" 12 (:?rad :?crd2 :?fids) #object[clojure.core$eval13514$fn__13515 0x32f0a0d6 "clojure.core$eval13514$fn__13515@32f0a0d6"])
(6 e 4 ((NearbyObjects :? :? :? :? :?tim1) nil nil) "as:AssertNearbyObjects")
(7 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(8 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval13518$fn__13519 0x23518c6d "clojure.core$eval13518$fn__13519@23518c6d"]) "as:AssertNearbyObjects" 11 (:?tim2 :?fids) #object[clojure.core$eval13524$fn__13525 0x38ff9e10 "clojure.core$eval13524$fn__13525@38ff9e10"])
(9 e 5 ((NearbyIslands :? :? :?tim1) nil nil) "as:AssertNearbyIslands")
(10 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(11 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval13552$fn__13553 0x62599c6f "clojure.core$eval13552$fn__13553@62599c6f"]) "as:AssertNearbyIslands" 11 (:?tim2 :?crs :?bco :?fids) #object[clojure.core$eval13558$fn__13559 0x2deb0606 "clojure.core$eval13558$fn__13559@2deb0606"])
(12 e 0 ((Island :? :?ico :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordIsland")
(13 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval13571$fn__13572 0x70617c47 "clojure.core$eval13571$fn__13572@70617c47"]) "as:UpdatePolarCoordIsland" 11 (:?tim2 :?crs :?bco :?ico :?fids) #object[clojure.core$eval13576$fn__13577 0x15a3a4ed "clojure.core$eval13576$fn__13577@15a3a4ed"])
(14 e 2 ((NamedObject :? :? :?oco :? :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordObject")
(15 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval13580$fn__13581 0x30046e98 "clojure.core$eval13580$fn__13581@30046e98"]) "as:UpdatePolarCoordObject" 11 (:?tim2 :?crs :?bco :?oco :?fids) #object[clojure.core$eval13585$fn__13586 0x29273aee "clojure.core$eval13585$fn__13586@29273aee"])
(16 e 6 ((Answer :? :? :?tim1) nil nil) "as:InitAnswer")
(17 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval13589$fn__13590 0x3b1efed "clojure.core$eval13589$fn__13590@3b1efed"]) "as:InitAnswer" 11 (:?tim2 :?fids) #object[clojure.core$eval13593$fn__13594 0x19c8ed16 "clojure.core$eval13593$fn__13594@19c8ed16"])
(18 e 7 ((Answer2 :? :? :? :? :?tim1) nil nil) "as:InitAnswer2")
(19 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval13597$fn__13598 0x568ffa0f "clojure.core$eval13597$fn__13598@568ffa0f"]) "as:InitAnswer2" 11 (:?tim2 :?fids) #object[clojure.core$eval13601$fn__13602 0x5e0f3b41 "clojure.core$eval13601$fn__13602@5e0f3b41"])
(20 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyIslands")
(21 i 8 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil))
(22 x 0 ((Island :? :? :? :? :? :? :?tit) nil nil) "as:NearbyIslands" 10 (:?tit :?acc) #object[clojure.core$eval13605$fn__13606 0x711ae28d "clojure.core$eval13605$fn__13606@711ae28d"])
(23 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:NearbyTypes")
(24 i 9 ((Question :? :? :? :? :? "nearby-types" :? :? :? :?) nil nil))
(25 x 2 ((NamedObject :? :?ame :? :?nat :?pla :? :? :? :?tit) nil nil) "as:NearbyTypes" 10 (:?aml :?ame :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13609$fn__13610 0x772b14d0 "clojure.core$eval13609$fn__13610@772b14d0"])
(26 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyObjects")
(27 i 10 ((Question :? :? :? :? :? "nearby-objects" :? :?sub :? :?) nil nil))
(28 x 2 ((NamedObject :? :?ame :? :?nat :?pla :? :? :? :?tit) nil nil) "as:NearbyObjects" 10 (:?ame :?tit :?acc :?pla :?sub :?nat) #object[clojure.core$eval13613$fn__13614 0x416d994d "clojure.core$eval13613$fn__13614@416d994d"])
(29 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAhead_Isl")
(30 i 11 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(31 x 12 ((Island :? :? :?pol :? "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13619$fn__13620 0x4d3c4cab "clojure.core$eval13619$fn__13620@4d3c4cab"])
(32 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAhead_Obj")
(33 i 11 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(34 x 13 ((NamedObject :? :?ame :? :?nat :?pla :?pol "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13623$fn__13624 0x3c14a0c7 "clojure.core$eval13623$fn__13624@3c14a0c7"])
(35 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAstern_Isl")
(36 i 14 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(37 x 15 ((Island :? :? :?pol :? "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13627$fn__13628 0x127a8cc3 "clojure.core$eval13627$fn__13628@127a8cc3"])
(38 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAstern_Obj")
(39 i 14 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(40 x 16 ((NamedObject :? :?ame :? :?nat :?pla :?pol "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13631$fn__13632 0x7fd6c066 "clojure.core$eval13631$fn__13632@7fd6c066"])
(41 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortAbaft_Isl")
(42 i 17 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(43 x 18 ((Island :? :? :?pol :? "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13635$fn__13636 0x1bf3cb57 "clojure.core$eval13635$fn__13636@1bf3cb57"])
(44 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortAbaft_Obj")
(45 i 17 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(46 x 19 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13639$fn__13640 0x214f1fac "clojure.core$eval13639$fn__13640@214f1fac"])
(47 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBeam_Isl")
(48 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(49 x 21 ((Island :? :? :?pol :? "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13643$fn__13644 0xccf5c22 "clojure.core$eval13643$fn__13644@ccf5c22"])
(50 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBeam_Obj")
(51 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(52 x 22 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13647$fn__13648 0x4e87927 "clojure.core$eval13647$fn__13648@4e87927"])
(53 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBow_Isl")
(54 i 23 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(55 x 24 ((Island :? :? :?pol :? "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13651$fn__13652 0x1c1f829f "clojure.core$eval13651$fn__13652@1c1f829f"])
(56 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBow_Obj")
(57 i 23 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(58 x 25 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13655$fn__13656 0x5fda99aa "clojure.core$eval13655$fn__13656@5fda99aa"])
(59 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarAbaft_Isl")
(60 i 26 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(61 x 27 ((Island :? :? :?pol :? "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13659$fn__13660 0x48ace00f "clojure.core$eval13659$fn__13660@48ace00f"])
(62 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarAbaft_Obj")
(63 i 26 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(64 x 28 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13663$fn__13664 0x67065704 "clojure.core$eval13663$fn__13664@67065704"])
(65 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBeam_Isl")
(66 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(67 x 30 ((Island :? :? :?pol :? "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13667$fn__13668 0x46394fde "clojure.core$eval13667$fn__13668@46394fde"])
(68 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBeam_Obj")
(69 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(70 x 31 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13671$fn__13672 0x268f31f2 "clojure.core$eval13671$fn__13672@268f31f2"])
(71 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBow_Isl")
(72 i 32 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(73 x 33 ((Island :? :? :?pol :? "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13675$fn__13676 0x65c3443c "clojure.core$eval13675$fn__13676@65c3443c"])
(74 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBow_Obj")
(75 i 32 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(76 x 34 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13679$fn__13680 0x25d79da7 "clojure.core$eval13679$fn__13680@25d79da7"])
(77 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBehind")
(78 i 35 ((Question :? :? :? :?tit1 :? "what-is" :? "behind the island" :? :?) nil nil))
(79 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(80 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval13683$fn__13684 0x367e376d "clojure.core$eval13683$fn__13684@367e376d"]) "as:IslandsBehind" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval13687$fn__13688 0x1ad626e3 "clojure.core$eval13687$fn__13688@1ad626e3"])
(81 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBefore")
(82 i 36 ((Question :? :? :? :?tit1 :? "what-is" :? "before the island" :? :?) nil nil))
(83 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(84 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval13691$fn__13692 0x5f22f3e2 "clojure.core$eval13691$fn__13692@5f22f3e2"]) "as:IslandsBefore" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval13695$fn__13696 0x90038ad "clojure.core$eval13695$fn__13696@90038ad"])
(85 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsIsland")
(86 i 37 ((Question :? :? :? :?tit :? "where-is" :? "island" :? :?) nil nil))
(87 x 0 ((Island :? :?crd :?pol :? :?sid :? :?tit) nil nil) "as:WhereIsIsland" 10 (:?sid :?pol :?tit :?crd :?rad :?fids) #object[clojure.core$eval13699$fn__13700 0x116fcedf "clojure.core$eval13699$fn__13700@116fcedf"])
(88 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsObject")
(89 i 38 ((Question :? :? :? :? :? "where-is" :? :?sub :?suv :?) nil nil))
(90 x 2 ((NamedObject :? :? :?crd :? :? :?pol :?sid :? :?suv) nil nil) "as:WhereIsObject" 10 (:?sid :?pol :?crd :?rad :?sub :?fids :?suv) #object[clojure.core$eval13706$fn__13707 0x583a068 "clojure.core$eval13706$fn__13707@583a068"])
(91 ex 39 ((Question :? :?crd :? :? :? "what-is" :? "weather" :? :?) nil nil) "as:Weather" 10 (:?crd :?fids) #object[clojure.core$eval13713$fn__13714 0x470e6b50 "clojure.core$eval13713$fn__13714@470e6b50"])
(92 ex 40 ((Question :? :?crd :? :? :? "wiki-tells" :? "about" :? :?) nil nil) "as:WikiTellsAbout" 10 (:?crd :?fids) #object[clojure.core$eval13717$fn__13718 0x38585b3 "clojure.core$eval13717$fn__13718@38585b3"])
(93 ex 41 ((Question :? :? :? :? :? "about" :? "thing" :?sval :?) nil nil) "as:AboutThing" 10 (:?fids :?sval) #object[clojure.core$eval13721$fn__13722 0x5abcc5ff "clojure.core$eval13721$fn__13722@5abcc5ff"])
(94 ex 42 ((Question :? :? :? :?tit :? "about" :? "island" :? :?) nil nil) "as:AboutIsland" 10 (:?tit :?fids) #object[clojure.core$eval13725$fn__13726 0x38dd2107 "clojure.core$eval13725$fn__13726@38dd2107"])
(95 ex 43 ((Question :? :? :? :? :? "about" :? :?sub :?suv :?) (:?sub) #object[clojure.core$eval13729$fn__13730 0x7b273c99 "clojure.core$eval13729$fn__13730@7b273c99"]) "as:AboutObject" 10 (:?fids :?suv) #object[clojure.core$eval13733$fn__13734 0x475b03a4 "clojure.core$eval13733$fn__13734@475b03a4"])
(96 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsOnSide")
(97 x 44 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) (:?sub) #object[clojure.core$eval13737$fn__13738 0x3fe26773 "clojure.core$eval13737$fn__13738@3fe26773"]) "as:AnswerIslandsOnSide" 9 (:?acc :?sub) #object[clojure.core$eval13742$fn__13743 0x2ffab96e "clojure.core$eval13742$fn__13743@2ffab96e"])
(98 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerObjectsOnSide")
(99 x 44 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) nil nil) "as:AnswerObjectsOnSide" 8 (:?aml :?pll :?sub :?fids :?nal) #object[clojure.core$eval13746$fn__13747 0x48dbdb02 "clojure.core$eval13746$fn__13747@48dbdb02"])
(100 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyIslands")
(101 x 8 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil) "as:AnswerNearbyIslands" 9 (:?acc :?fids) #object[clojure.core$eval13750$fn__13751 0xd54eae8 "clojure.core$eval13750$fn__13751@d54eae8"])
(102 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerNearbyTypes")
(103 x 9 ((Question :? :? :? :? :? "nearby-types" :? :? :? :?) nil nil) "as:AnswerNearbyTypes" 9 (:?aml :?pll :?fids :?nal) #object[clojure.core$eval13754$fn__13755 0x7e6aa364 "clojure.core$eval13754$fn__13755@7e6aa364"])
(104 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyObjects")
(105 x 10 ((Question :? :? :? :? :? "nearby-objects" :? :? :? :?) nil nil) "as:AnswerNearbyObjects" 9 (:?acc :?fids) #object[clojure.core$eval13758$fn__13759 0x5f66e6c7 "clojure.core$eval13758$fn__13759@5f66e6c7"])
(106 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBehind")
(107 x 35 ((Question :? :? :? :?tit :? "what-is" :? "behind the island" :? :?) nil nil) "as:AnswerIslandsBehind" 9 (:?tit :?acc :?fids) #object[clojure.core$eval13762$fn__13763 0x7d8f8e5d "clojure.core$eval13762$fn__13763@7d8f8e5d"])
(108 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(109 x 36 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval13766$fn__13767 0x4a8d6cac "clojure.core$eval13766$fn__13767@4a8d6cac"])
(110 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(111 x 36 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval13770$fn__13771 0x1079a7b8 "clojure.core$eval13770$fn__13771@1079a7b8"])
