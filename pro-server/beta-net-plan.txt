(0 e 0 ((Island :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteIsland")
(1 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval11725$fn__11726 0x7e98f683 "clojure.core$eval11725$fn__11726@7e98f683"]) "as:RetractObsoleteIsland" 12 (:?fids) #object[clojure.core$eval11729$fn__11730 0x559e72d7 "clojure.core$eval11729$fn__11730@559e72d7"])
(2 e 2 ((NamedObject :? :? :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteObjects")
(3 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval11733$fn__11734 0x4df1bbca "clojure.core$eval11733$fn__11734@4df1bbca"]) "as:RetractObsoleteObjects" 12 (:?fids) #object[clojure.core$eval11737$fn__11738 0x51f38d7a "clojure.core$eval11737$fn__11738@51f38d7a"])
(4 e 1 ((OSMData :? :?crd1 :?rad :?tim1 :?vol) nil nil) "as:CheckOSMData")
(5 x 3 ((Question :? :?crd2 :? :? :? :? :? :? :? :?tim2) (:?tim2 :?crd2 :?vol :?crd1 :?tim1) #object[clojure.core$eval11741$fn__11742 0x4616b12e "clojure.core$eval11741$fn__11742@4616b12e"]) "as:CheckOSMData" 12 (:?rad :?crd2 :?fids) #object[clojure.core$eval11749$fn__11750 0x160f179d "clojure.core$eval11749$fn__11750@160f179d"])
(6 e 4 ((NearbyObjects :? :? :? :? :?tim1) nil nil) "as:AssertNearbyObjects")
(7 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(8 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval11753$fn__11754 0x2879f2e4 "clojure.core$eval11753$fn__11754@2879f2e4"]) "as:AssertNearbyObjects" 11 (:?tim2 :?fids) #object[clojure.core$eval11759$fn__11760 0x4b3d6aa5 "clojure.core$eval11759$fn__11760@4b3d6aa5"])
(9 e 5 ((NearbyIslands :? :? :?tim1) nil nil) "as:AssertNearbyIslands")
(10 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(11 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval11787$fn__11788 0x5a6c894e "clojure.core$eval11787$fn__11788@5a6c894e"]) "as:AssertNearbyIslands" 11 (:?tim2 :?crs :?bco :?fids) #object[clojure.core$eval11793$fn__11794 0x5ef32e22 "clojure.core$eval11793$fn__11794@5ef32e22"])
(12 e 0 ((Island :? :?ico :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordIsland")
(13 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval11806$fn__11807 0x7008925f "clojure.core$eval11806$fn__11807@7008925f"]) "as:UpdatePolarCoordIsland" 11 (:?tim2 :?crs :?bco :?ico :?fids) #object[clojure.core$eval11811$fn__11812 0x1188c292 "clojure.core$eval11811$fn__11812@1188c292"])
(14 e 2 ((NamedObject :? :? :?oco :? :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordObject")
(15 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval11815$fn__11816 0x695b8e16 "clojure.core$eval11815$fn__11816@695b8e16"]) "as:UpdatePolarCoordObject" 11 (:?tim2 :?crs :?bco :?oco :?fids) #object[clojure.core$eval11820$fn__11821 0x3c264f7 "clojure.core$eval11820$fn__11821@3c264f7"])
(16 e 6 ((Answer :? :? :?tim1) nil nil) "as:InitAnswer")
(17 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval11824$fn__11825 0x40f3ab8a "clojure.core$eval11824$fn__11825@40f3ab8a"]) "as:InitAnswer" 11 (:?tim2 :?fids) #object[clojure.core$eval11828$fn__11829 0x49138d25 "clojure.core$eval11828$fn__11829@49138d25"])
(18 e 7 ((Answer2 :? :? :? :? :?tim1) nil nil) "as:InitAnswer2")
(19 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval11832$fn__11833 0xc947f1d "clojure.core$eval11832$fn__11833@c947f1d"]) "as:InitAnswer2" 11 (:?tim2 :?fids) #object[clojure.core$eval11836$fn__11837 0x35c81d1e "clojure.core$eval11836$fn__11837@35c81d1e"])
(20 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyIslands")
(21 i 8 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil))
(22 x 0 ((Island :? :? :? :? :? :? :?tit) nil nil) "as:NearbyIslands" 10 (:?tit :?acc) #object[clojure.core$eval11840$fn__11841 0x7a07a7f4 "clojure.core$eval11840$fn__11841@7a07a7f4"])
(23 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:NearbyTypes")
(24 i 9 ((Question :? :? :? :? :? "nearby-types" :? :? :? :?) nil nil))
(25 x 2 ((NamedObject :? :?ame :? :?nat :?pla :? :? :? :?tit) nil nil) "as:NearbyTypes" 10 (:?aml :?ame :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11844$fn__11845 0x511fac92 "clojure.core$eval11844$fn__11845@511fac92"])
(26 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyObjects")
(27 i 10 ((Question :? :? :? :? :? "nearby-objects" :? :?sub :? :?) nil nil))
(28 x 2 ((NamedObject :? :?ame :? :?nat :?pla :? :? :? :?tit) nil nil) "as:NearbyObjects" 10 (:?ame :?tit :?acc :?pla :?sub :?nat) #object[clojure.core$eval11848$fn__11849 0x61650931 "clojure.core$eval11848$fn__11849@61650931"])
(29 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAhead_Isl")
(30 i 11 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(31 x 12 ((Island :? :? :?pol :? "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11854$fn__11855 0x3a208020 "clojure.core$eval11854$fn__11855@3a208020"])
(32 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAhead_Obj")
(33 i 11 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(34 x 13 ((NamedObject :? :?ame :? :?nat :?pla :?pol "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11858$fn__11859 0x4b80354 "clojure.core$eval11858$fn__11859@4b80354"])
(35 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAstern_Isl")
(36 i 14 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(37 x 15 ((Island :? :? :?pol :? "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11862$fn__11863 0x12522fef "clojure.core$eval11862$fn__11863@12522fef"])
(38 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAstern_Obj")
(39 i 14 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(40 x 16 ((NamedObject :? :?ame :? :?nat :?pla :?pol "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11866$fn__11867 0x76f30280 "clojure.core$eval11866$fn__11867@76f30280"])
(41 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortAbaft_Isl")
(42 i 17 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(43 x 18 ((Island :? :? :?pol :? "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11870$fn__11871 0x358e58df "clojure.core$eval11870$fn__11871@358e58df"])
(44 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortAbaft_Obj")
(45 i 17 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(46 x 19 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11874$fn__11875 0x41213f11 "clojure.core$eval11874$fn__11875@41213f11"])
(47 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBeam_Isl")
(48 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(49 x 21 ((Island :? :? :?pol :? "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11878$fn__11879 0x319ce817 "clojure.core$eval11878$fn__11879@319ce817"])
(50 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBeam_Obj")
(51 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(52 x 22 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11882$fn__11883 0x1037371f "clojure.core$eval11882$fn__11883@1037371f"])
(53 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBow_Isl")
(54 i 23 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(55 x 24 ((Island :? :? :?pol :? "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11886$fn__11887 0x28359e7d "clojure.core$eval11886$fn__11887@28359e7d"])
(56 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBow_Obj")
(57 i 23 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(58 x 25 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11890$fn__11891 0x6bca5a61 "clojure.core$eval11890$fn__11891@6bca5a61"])
(59 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarAbaft_Isl")
(60 i 26 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(61 x 27 ((Island :? :? :?pol :? "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11894$fn__11895 0x695edf28 "clojure.core$eval11894$fn__11895@695edf28"])
(62 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarAbaft_Obj")
(63 i 26 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(64 x 28 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11898$fn__11899 0x7227195e "clojure.core$eval11898$fn__11899@7227195e"])
(65 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBeam_Isl")
(66 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(67 x 30 ((Island :? :? :?pol :? "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11902$fn__11903 0x63195adb "clojure.core$eval11902$fn__11903@63195adb"])
(68 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBeam_Obj")
(69 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(70 x 31 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11906$fn__11907 0x5810bce7 "clojure.core$eval11906$fn__11907@5810bce7"])
(71 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBow_Isl")
(72 i 32 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(73 x 33 ((Island :? :? :?pol :? "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11910$fn__11911 0x6cf9c1c "clojure.core$eval11910$fn__11911@6cf9c1c"])
(74 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBow_Obj")
(75 i 32 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(76 x 34 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11914$fn__11915 0x742d178a "clojure.core$eval11914$fn__11915@742d178a"])
(77 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBehind")
(78 i 35 ((Question :? :? :? :?tit1 :? "what-is" :? "behind the island" :? :?) nil nil))
(79 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(80 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval11918$fn__11919 0x6f159033 "clojure.core$eval11918$fn__11919@6f159033"]) "as:IslandsBehind" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval11922$fn__11923 0x6183e4cd "clojure.core$eval11922$fn__11923@6183e4cd"])
(81 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBefore")
(82 i 36 ((Question :? :? :? :?tit1 :? "what-is" :? "before the island" :? :?) nil nil))
(83 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(84 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval11926$fn__11927 0x31882c7f "clojure.core$eval11926$fn__11927@31882c7f"]) "as:IslandsBefore" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval11930$fn__11931 0x433c52a7 "clojure.core$eval11930$fn__11931@433c52a7"])
(85 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsIsland")
(86 i 37 ((Question :? :? :? :?tit :? "where-is" :? "island" :? :?) nil nil))
(87 x 0 ((Island :? :?crd :?pol :?sec :?sid :? :?tit) nil nil) "as:WhereIsIsland" 10 (:?sid :?pol :?tit :?crd :?rad :?fids) #object[clojure.core$eval11934$fn__11935 0x3c8715a1 "clojure.core$eval11934$fn__11935@3c8715a1"])
(88 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsOnSide")
(89 x 38 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) (:?sub) #object[clojure.core$eval11941$fn__11942 0x1b8c7f5a "clojure.core$eval11941$fn__11942@1b8c7f5a"]) "as:AnswerIslandsOnSide" 9 (:?acc :?sub) #object[clojure.core$eval11946$fn__11947 0x328fb621 "clojure.core$eval11946$fn__11947@328fb621"])
(90 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerObjectsOnSide")
(91 x 38 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) nil nil) "as:AnswerObjectsOnSide" 8 (:?aml :?pll :?sub :?fids :?nal) #object[clojure.core$eval11950$fn__11951 0x5544b578 "clojure.core$eval11950$fn__11951@5544b578"])
(92 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyIslands")
(93 x 8 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil) "as:AnswerNearbyIslands" 9 (:?acc :?fids) #object[clojure.core$eval11954$fn__11955 0x2014e625 "clojure.core$eval11954$fn__11955@2014e625"])
(94 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerNearbyTypes")
(95 x 9 ((Question :? :? :? :? :? "nearby-types" :? :? :? :?) nil nil) "as:AnswerNearbyTypes" 9 (:?aml :?pll :?fids :?nal) #object[clojure.core$eval11958$fn__11959 0x2e76b91a "clojure.core$eval11958$fn__11959@2e76b91a"])
(96 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyObjects")
(97 x 10 ((Question :? :? :? :? :? "nearby-objects" :? :? :? :?) nil nil) "as:AnswerNearbyObjects" 9 (:?acc :?fids) #object[clojure.core$eval11962$fn__11963 0x6d2f3e63 "clojure.core$eval11962$fn__11963@6d2f3e63"])
(98 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBehind")
(99 x 35 ((Question :? :? :? :?tit :? "what-is" :? "behind the island" :? :?) nil nil) "as:AnswerIslandsBehind" 9 (:?tit :?acc :?fids) #object[clojure.core$eval11966$fn__11967 0x6132bc45 "clojure.core$eval11966$fn__11967@6132bc45"])
(100 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(101 x 36 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval11970$fn__11971 0x71351d40 "clojure.core$eval11970$fn__11971@71351d40"])
(102 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(103 x 36 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval11974$fn__11975 0x4464b19f "clojure.core$eval11974$fn__11975@4464b19f"])
