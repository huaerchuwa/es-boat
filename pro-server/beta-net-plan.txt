(0 e 0 ((Island :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteIsland")
(1 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval11699$fn__11700 0x119496a1 "clojure.core$eval11699$fn__11700@119496a1"]) "as:RetractObsoleteIsland" 12 (:?fids) #object[clojure.core$eval11703$fn__11704 0x29461ce8 "clojure.core$eval11703$fn__11704@29461ce8"])
(2 e 2 ((NamedObject :? :? :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteObjects")
(3 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval11707$fn__11708 0x6a6b793b "clojure.core$eval11707$fn__11708@6a6b793b"]) "as:RetractObsoleteObjects" 12 (:?fids) #object[clojure.core$eval11711$fn__11712 0x34757ecc "clojure.core$eval11711$fn__11712@34757ecc"])
(4 e 1 ((OSMData :? :?crd1 :?rad :?tim1 :?vol) nil nil) "as:CheckOSMData")
(5 x 3 ((Question :? :?crd2 :? :? :? :? :? :? :? :?tim2) (:?tim2 :?crd2 :?vol :?crd1 :?tim1) #object[clojure.core$eval11715$fn__11716 0x62df8b0b "clojure.core$eval11715$fn__11716@62df8b0b"]) "as:CheckOSMData" 12 (:?rad :?crd2 :?fids) #object[clojure.core$eval11723$fn__11724 0xc172e3a "clojure.core$eval11723$fn__11724@c172e3a"])
(6 e 4 ((NearbyObjects :? :? :? :? :?tim1) nil nil) "as:AssertNearbyObjects")
(7 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(8 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval11727$fn__11728 0x6171cb45 "clojure.core$eval11727$fn__11728@6171cb45"]) "as:AssertNearbyObjects" 11 (:?tim2 :?fids) #object[clojure.core$eval11733$fn__11734 0x106e5f6c "clojure.core$eval11733$fn__11734@106e5f6c"])
(9 e 5 ((NearbyIslands :? :? :?tim1) nil nil) "as:AssertNearbyIslands")
(10 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(11 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval11761$fn__11762 0x2f2471c "clojure.core$eval11761$fn__11762@2f2471c"]) "as:AssertNearbyIslands" 11 (:?tim2 :?crs :?bco :?fids) #object[clojure.core$eval11767$fn__11768 0xa3facfb "clojure.core$eval11767$fn__11768@a3facfb"])
(12 e 0 ((Island :? :?ico :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordIsland")
(13 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval11780$fn__11781 0x5426a05b "clojure.core$eval11780$fn__11781@5426a05b"]) "as:UpdatePolarCoordIsland" 11 (:?tim2 :?crs :?bco :?ico :?fids) #object[clojure.core$eval11785$fn__11786 0x5ce05e6b "clojure.core$eval11785$fn__11786@5ce05e6b"])
(14 e 2 ((NamedObject :? :? :?oco :? :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordObject")
(15 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval11789$fn__11790 0x7399eba4 "clojure.core$eval11789$fn__11790@7399eba4"]) "as:UpdatePolarCoordObject" 11 (:?tim2 :?crs :?bco :?oco :?fids) #object[clojure.core$eval11794$fn__11795 0x5a2251c1 "clojure.core$eval11794$fn__11795@5a2251c1"])
(16 e 6 ((Answer :? :? :?tim1) nil nil) "as:InitAnswer")
(17 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval11798$fn__11799 0x5b66989d "clojure.core$eval11798$fn__11799@5b66989d"]) "as:InitAnswer" 11 (:?tim2 :?fids) #object[clojure.core$eval11802$fn__11803 0x16998d28 "clojure.core$eval11802$fn__11803@16998d28"])
(18 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAhead")
(19 i 7 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(20 x 8 ((Island :? :? :?pol :? "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11806$fn__11807 0x748b9482 "clojure.core$eval11806$fn__11807@748b9482"])
(21 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAstern")
(22 i 9 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(23 x 10 ((Island :? :? :?pol :? "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11810$fn__11811 0x3af2ac70 "clojure.core$eval11810$fn__11811@3af2ac70"])
(24 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortAbaft")
(25 i 11 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(26 x 12 ((Island :? :? :?pol :? "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11814$fn__11815 0x6d4f1d2b "clojure.core$eval11814$fn__11815@6d4f1d2b"])
(27 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBeam")
(28 i 13 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(29 x 14 ((Island :? :? :?pol :? "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11818$fn__11819 0x32a75391 "clojure.core$eval11818$fn__11819@32a75391"])
(30 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBow")
(31 i 15 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(32 x 16 ((Island :? :? :?pol :? "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11822$fn__11823 0x406ec3ca "clojure.core$eval11822$fn__11823@406ec3ca"])
(33 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarAbaft")
(34 i 17 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(35 x 18 ((Island :? :? :?pol :? "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11826$fn__11827 0x34f24cc9 "clojure.core$eval11826$fn__11827@34f24cc9"])
(36 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBeam")
(37 i 19 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(38 x 20 ((Island :? :? :?pol :? "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11830$fn__11831 0x28c8b3b1 "clojure.core$eval11830$fn__11831@28c8b3b1"])
(39 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBow")
(40 i 21 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(41 x 22 ((Island :? :? :?pol :? "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11834$fn__11835 0x226df794 "clojure.core$eval11834$fn__11835@226df794"])
(42 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyIslands")
(43 i 23 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil))
(44 x 0 ((Island :? :? :? :? :? :? :?tit) nil nil) "as:NearbyIslands" 10 (:?tit :?acc) #object[clojure.core$eval11838$fn__11839 0x1bc30645 "clojure.core$eval11838$fn__11839@1bc30645"])
(45 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBehind")
(46 i 24 ((Question :? :? :? :?tit1 :? "what-is" :? "behind the island" :? :?) nil nil))
(47 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(48 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval11842$fn__11843 0x2e8f3f64 "clojure.core$eval11842$fn__11843@2e8f3f64"]) "as:IslandsBehind" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval11846$fn__11847 0x48f98ad4 "clojure.core$eval11846$fn__11847@48f98ad4"])
(49 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBefore")
(50 i 25 ((Question :? :? :? :?tit1 :? "what-is" :? "before the island" :? :?) nil nil))
(51 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(52 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval11850$fn__11851 0x1226363f "clojure.core$eval11850$fn__11851@1226363f"]) "as:IslandsBefore" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval11854$fn__11855 0x4ae9df48 "clojure.core$eval11854$fn__11855@4ae9df48"])
(53 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsIsland")
(54 i 26 ((Question :? :? :? :?tit :? "where-is" :? "island" :? :?) nil nil))
(55 x 0 ((Island :? :?crd :?pol :?sec :?sid :? :?tit) nil nil) "as:WhereIsIsland" 10 (:?sid :?pol :?tit :?crd :?rad :?fids) #object[clojure.core$eval11858$fn__11859 0x63a3930b "clojure.core$eval11858$fn__11859@63a3930b"])
(56 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsOnSide")
(57 x 27 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) (:?sub) #object[clojure.core$eval11865$fn__11866 0x30a21bdd "clojure.core$eval11865$fn__11866@30a21bdd"]) "as:AnswerIslandsOnSide" 9 (:?acc :?sub :?fids) #object[clojure.core$eval11869$fn__11870 0x34e38243 "clojure.core$eval11869$fn__11870@34e38243"])
(58 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyIslands")
(59 x 23 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil) "as:AnswerNearbyIslands" 9 (:?acc :?fids) #object[clojure.core$eval11873$fn__11874 0x5bb3795a "clojure.core$eval11873$fn__11874@5bb3795a"])
(60 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBehind")
(61 x 24 ((Question :? :? :? :?tit :? "what-is" :? "behind the island" :? :?) nil nil) "as:AnswerIslandsBehind" 9 (:?tit :?acc :?fids) #object[clojure.core$eval11877$fn__11878 0xf30881 "clojure.core$eval11877$fn__11878@f30881"])
(62 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(63 x 25 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval11881$fn__11882 0x2c4a8647 "clojure.core$eval11881$fn__11882@2c4a8647"])
