(0 e 0 ((Island :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteIsland")
(1 x 1 ((OSMData :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval14105$fn__14106 0x78b4809f "clojure.core$eval14105$fn__14106@78b4809f"]) "as:RetractObsoleteIsland" -2 (:?fids) #object[clojure.core$eval14109$fn__14110 0x105c9f6c "clojure.core$eval14109$fn__14110@105c9f6c"])
(2 e 2 ((NamedObject :? :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteObjects")
(3 x 1 ((OSMData :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval14113$fn__14114 0xba206ee "clojure.core$eval14113$fn__14114@ba206ee"]) "as:RetractObsoleteObjects" -2 (:?fids) #object[clojure.core$eval14117$fn__14118 0x6007b848 "clojure.core$eval14117$fn__14118@6007b848"])
(4 e 1 ((OSMData :?crd1 :?rad :?tim1 :?vol) nil nil) "as:CheckOSMData")
(5 x 3 ((Question :?crd2 :? :? :? :? :? :? :? :?tim2) (:?tim2 :?crd2 :?vol :?crd1 :?tim1) #object[clojure.core$eval14121$fn__14122 0x5a41724d "clojure.core$eval14121$fn__14122@5a41724d"]) "as:CheckOSMData" -2 (:?rad :?crd2 :?fids) #object[clojure.core$eval14129$fn__14130 0x34ac7538 "clojure.core$eval14129$fn__14130@34ac7538"])
(6 e 4 ((NearbyObjects :? :? :? :?tim1) nil nil) "as:AssertNearbyObjects")
(7 i 3 ((Question :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(8 x 1 ((OSMData :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval14133$fn__14134 0x5893c2cd "clojure.core$eval14133$fn__14134@5893c2cd"]) "as:AssertNearbyObjects" -1 (:?tim2 :?fids) #object[clojure.core$eval14139$fn__14140 0x441347a1 "clojure.core$eval14139$fn__14140@441347a1"])
(9 e 5 ((NearbyIslands :? :?tim1) nil nil) "as:AssertNearbyIslands")
(10 i 3 ((Question :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(11 x 1 ((OSMData :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval14167$fn__14168 0x315761c "clojure.core$eval14167$fn__14168@315761c"]) "as:AssertNearbyIslands" -1 (:?tim2 :?crs :?bco :?fids) #object[clojure.core$eval14173$fn__14174 0x4192aaed "clojure.core$eval14173$fn__14174@4192aaed"])
(12 e 0 ((Island :?ico :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordIsland")
(13 x 3 ((Question :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval14186$fn__14187 0x1eb0069a "clojure.core$eval14186$fn__14187@1eb0069a"]) "as:UpdatePolarCoordIsland" -1 (:?tim2 :?crs :?bco :?ico :?fids) #object[clojure.core$eval14191$fn__14192 0x438d155f "clojure.core$eval14191$fn__14192@438d155f"])
(14 e 2 ((NamedObject :? :?oco :? :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordObject")
(15 x 3 ((Question :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval14195$fn__14196 0x26bf430 "clojure.core$eval14195$fn__14196@26bf430"]) "as:UpdatePolarCoordObject" -1 (:?tim2 :?crs :?bco :?oco :?fids) #object[clojure.core$eval14200$fn__14201 0x5e88b064 "clojure.core$eval14200$fn__14201@5e88b064"])
(16 e 6 ((Answer :? :?tim1) nil nil) "as:InitAnswer")
(17 x 3 ((Question :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval14204$fn__14205 0x12d0f7ce "clojure.core$eval14204$fn__14205@12d0f7ce"]) "as:InitAnswer" -1 (:?tim2 :?fids) #object[clojure.core$eval14208$fn__14209 0x5fb10556 "clojure.core$eval14208$fn__14209@5fb10556"])
(18 e 7 ((Answer2 :? :? :? :?tim1) nil nil) "as:InitAnswer2")
(19 x 3 ((Question :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval14212$fn__14213 0x3ffb769b "clojure.core$eval14212$fn__14213@3ffb769b"]) "as:InitAnswer2" -1 (:?tim2 :?fids) #object[clojure.core$eval14216$fn__14217 0x206fe7f3 "clojure.core$eval14216$fn__14217@206fe7f3"])
(20 e 6 ((Answer :?acc :?) nil nil) "as:NearbyIslands")
(21 i 8 ((Question :? :? :? :? "nearby-islands" :? :? :? :?) nil nil))
(22 x 0 ((Island :? :? :? :? :? :?tit) nil nil) "as:NearbyIslands" 0 (:?tit :?acc) #object[clojure.core$eval14220$fn__14221 0x6a3e5d11 "clojure.core$eval14220$fn__14221@6a3e5d11"])
(23 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:NearbyTypes")
(24 i 9 ((Question :? :? :? :? "nearby-types" :? :? :? :?) nil nil))
(25 x 2 ((NamedObject :?ame :? :?nat :?pla :? :? :? :?tit) nil nil) "as:NearbyTypes" 0 (:?aml :?ame :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14224$fn__14225 0x5cc40420 "clojure.core$eval14224$fn__14225@5cc40420"])
(26 e 6 ((Answer :?acc :?) nil nil) "as:NearbyObjects")
(27 i 10 ((Question :? :? :? :? "nearby-objects" :? :?sub :? :?) nil nil))
(28 x 2 ((NamedObject :?ame :? :?nat :?pla :? :? :? :?tit) nil nil) "as:NearbyObjects" 0 (:?ame :?tit :?acc :?pla :?sub :?nat) #object[clojure.core$eval14228$fn__14229 0x67d364e4 "clojure.core$eval14228$fn__14229@67d364e4"])
(29 ex 11 ((Question :?crd :? :? :? "nearby-things" :? :? :? :?) nil nil) "as:NearbyThings" 0 (:?crd :?fids) #object[clojure.core$eval14234$fn__14235 0x4185984f "clojure.core$eval14234$fn__14235@4185984f"])
(30 e 6 ((Answer :?acc :?) nil nil) "as:WhatIsAhead_Isl")
(31 i 12 ((Question :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(32 x 13 ((Island :? :?pol :? "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Isl" 0 (:?pol :?tit :?acc) #object[clojure.core$eval14238$fn__14239 0x29421145 "clojure.core$eval14238$fn__14239@29421145"])
(33 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:WhatIsAhead_Obj")
(34 i 12 ((Question :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(35 x 14 ((NamedObject :?ame :? :?nat :?pla :?pol "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Obj" 0 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14242$fn__14243 0x1adcf94a "clojure.core$eval14242$fn__14243@1adcf94a"])
(36 e 6 ((Answer :?acc :?) nil nil) "as:WhatIsAstern_Isl")
(37 i 15 ((Question :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(38 x 16 ((Island :? :?pol :? "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Isl" 0 (:?pol :?tit :?acc) #object[clojure.core$eval14246$fn__14247 0x233d5323 "clojure.core$eval14246$fn__14247@233d5323"])
(39 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:WhatIsAstern_Obj")
(40 i 15 ((Question :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(41 x 17 ((NamedObject :?ame :? :?nat :?pla :?pol "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Obj" 0 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14250$fn__14251 0x1be58af5 "clojure.core$eval14250$fn__14251@1be58af5"])
(42 e 6 ((Answer :?acc :?) nil nil) "as:WhatIsPortAbaft_Isl")
(43 i 18 ((Question :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(44 x 19 ((Island :? :?pol :? "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Isl" 0 (:?pol :?tit :?acc) #object[clojure.core$eval14254$fn__14255 0x2d333f7d "clojure.core$eval14254$fn__14255@2d333f7d"])
(45 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortAbaft_Obj")
(46 i 18 ((Question :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(47 x 20 ((NamedObject :?ame :? :?nat :?pla :?pol "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Obj" 0 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14258$fn__14259 0xd616c96 "clojure.core$eval14258$fn__14259@d616c96"])
(48 e 6 ((Answer :?acc :?) nil nil) "as:WhatIsPortBeam_Isl")
(49 i 21 ((Question :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(50 x 22 ((Island :? :?pol :? "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Isl" 0 (:?pol :?tit :?acc) #object[clojure.core$eval14262$fn__14263 0x2b35775b "clojure.core$eval14262$fn__14263@2b35775b"])
(51 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBeam_Obj")
(52 i 21 ((Question :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(53 x 23 ((NamedObject :?ame :? :?nat :?pla :?pol "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Obj" 0 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14266$fn__14267 0x3017823b "clojure.core$eval14266$fn__14267@3017823b"])
(54 e 6 ((Answer :?acc :?) nil nil) "as:WhatIsPortBow_Isl")
(55 i 24 ((Question :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(56 x 25 ((Island :? :?pol :? "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Isl" 0 (:?pol :?tit :?acc) #object[clojure.core$eval14270$fn__14271 0x645d9264 "clojure.core$eval14270$fn__14271@645d9264"])
(57 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBow_Obj")
(58 i 24 ((Question :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(59 x 26 ((NamedObject :?ame :? :?nat :?pla :?pol "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Obj" 0 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14274$fn__14275 0x7c3a606e "clojure.core$eval14274$fn__14275@7c3a606e"])
(60 e 6 ((Answer :?acc :?) nil nil) "as:WhatIsStarAbaft_Isl")
(61 i 27 ((Question :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(62 x 28 ((Island :? :?pol :? "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Isl" 0 (:?pol :?tit :?acc) #object[clojure.core$eval14278$fn__14279 0x52f4e76 "clojure.core$eval14278$fn__14279@52f4e76"])
(63 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarAbaft_Obj")
(64 i 27 ((Question :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(65 x 29 ((NamedObject :?ame :? :?nat :?pla :?pol "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Obj" 0 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14282$fn__14283 0x5b6823c1 "clojure.core$eval14282$fn__14283@5b6823c1"])
(66 e 6 ((Answer :?acc :?) nil nil) "as:WhatIsStarBeam_Isl")
(67 i 30 ((Question :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(68 x 31 ((Island :? :?pol :? "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Isl" 0 (:?pol :?tit :?acc) #object[clojure.core$eval14286$fn__14287 0x607e2309 "clojure.core$eval14286$fn__14287@607e2309"])
(69 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBeam_Obj")
(70 i 30 ((Question :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(71 x 32 ((NamedObject :?ame :? :?nat :?pla :?pol "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Obj" 0 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14290$fn__14291 0x7ec9b54c "clojure.core$eval14290$fn__14291@7ec9b54c"])
(72 e 6 ((Answer :?acc :?) nil nil) "as:WhatIsStarBow_Isl")
(73 i 33 ((Question :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(74 x 34 ((Island :? :?pol :? "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Isl" 0 (:?pol :?tit :?acc) #object[clojure.core$eval14294$fn__14295 0x1c03baf1 "clojure.core$eval14294$fn__14295@1c03baf1"])
(75 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBow_Obj")
(76 i 33 ((Question :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(77 x 35 ((NamedObject :?ame :? :?nat :?pla :?pol "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Obj" 0 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval14298$fn__14299 0x649cf5d7 "clojure.core$eval14298$fn__14299@649cf5d7"])
(78 e 6 ((Answer :?acc :?) nil nil) "as:IslandsBehind")
(79 i 36 ((Question :? :? :?tit1 :? "what-is" :? "behind the island" :? :?) nil nil))
(80 i 0 ((Island :? :?pol1 :?sec :? :? :?tit1) nil nil))
(81 x 0 ((Island :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval14302$fn__14303 0x4da41d6a "clojure.core$eval14302$fn__14303@4da41d6a"]) "as:IslandsBehind" 0 (:?tit2 :?acc :?pol2) #object[clojure.core$eval14306$fn__14307 0x7b219490 "clojure.core$eval14306$fn__14307@7b219490"])
(82 e 6 ((Answer :?acc :?) nil nil) "as:IslandsBefore")
(83 i 37 ((Question :? :? :?tit1 :? "what-is" :? "before the island" :? :?) nil nil))
(84 i 0 ((Island :? :?pol1 :?sec :? :? :?tit1) nil nil))
(85 x 0 ((Island :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval14310$fn__14311 0x5520a4be "clojure.core$eval14310$fn__14311@5520a4be"]) "as:IslandsBefore" 0 (:?tit2 :?acc :?pol2) #object[clojure.core$eval14314$fn__14315 0x5d1dbeef "clojure.core$eval14314$fn__14315@5d1dbeef"])
(86 e 1 ((OSMData :? :?rad :? :?) nil nil) "as:WhereIsIsland")
(87 i 38 ((Question :? :? :? :? "where-is" :? "island" :?tit :?) nil nil))
(88 x 0 ((Island :?crd :?pol :? :?sid :? :?tit) nil nil) "as:WhereIsIsland" 0 (:?sid :?pol :?tit :?crd :?rad :?fids) #object[clojure.core$eval14318$fn__14319 0x206b8dd1 "clojure.core$eval14318$fn__14319@206b8dd1"])
(89 e 1 ((OSMData :? :?rad :? :?) nil nil) "as:WhereIsObject")
(90 i 39 ((Question :? :? :? :? "where-is" :? :?sub :?suv :?) nil nil))
(91 x 2 ((NamedObject :? :?crd :? :? :?pol :?sid :? :?suv) (:?sub) #object[clojure.core$eval14323$fn__14324 0x43dc8fa9 "clojure.core$eval14323$fn__14324@43dc8fa9"]) "as:WhereIsObject" 0 (:?sid :?pol :?crd :?rad :?sub :?fids :?suv) #object[clojure.core$eval14328$fn__14329 0x390c8226 "clojure.core$eval14328$fn__14329@390c8226"])
(92 e 1 ((OSMData :? :?rad :? :?) nil nil) "as:WhereIsThing")
(93 x 40 ((Question :?crd :?crs :? :? "where-is" :? "thing" :?tit :?) nil nil) "as:WhereIsThing" 0 (:?tit :?crd :?rad :?crs :?fids) #object[clojure.core$eval14333$fn__14334 0x582528c0 "clojure.core$eval14333$fn__14334@582528c0"])
(94 ex 41 ((Question :?crd :? :? :? "what-is" :? "weather" :? :?) nil nil) "as:Weather" 0 (:?crd :?fids) #object[clojure.core$eval14338$fn__14339 0x6cabd75b "clojure.core$eval14338$fn__14339@6cabd75b"])
(95 ex 42 ((Question :?crd :? :? :? "what" :? "interesting" :? :?) nil nil) "as:WhatInteresting" 0 (:?crd :?fids) #object[clojure.core$eval14342$fn__14343 0x7875a841 "clojure.core$eval14342$fn__14343@7875a841"])
(96 ex 43 ((Question :? :? :? :? "about" :? "thing" :?sval :?) nil nil) "as:AboutThing" 0 (:?fids :?sval) #object[clojure.core$eval14346$fn__14347 0x20204947 "clojure.core$eval14346$fn__14347@20204947"])
(97 ex 44 ((Question :?crd :? :?tit :? "about" :? "island" :? :?) nil nil) "as:AboutIsland" 0 (:?tit :?crd :?fids) #object[clojure.core$eval14350$fn__14351 0x438761a1 "clojure.core$eval14350$fn__14351@438761a1"])
(98 ex 45 ((Question :?crd :? :? :? "about" :? :?sub :?suv :?) (:?sub) #object[clojure.core$eval14355$fn__14356 0x69ee9f0d "clojure.core$eval14355$fn__14356@69ee9f0d"]) "as:AboutObject" 0 (:?crd :?fids :?suv) #object[clojure.core$eval14360$fn__14361 0x28e4ae72 "clojure.core$eval14360$fn__14361@28e4ae72"])
(99 e 6 ((Answer :?acc :?) nil nil) "as:AnswerIslandsOnSide")
(100 x 46 ((Question :? :? :? :? "what-is" :? :?sub :? :?) (:?sub) #object[clojure.core$eval14364$fn__14365 0x4a5c7944 "clojure.core$eval14364$fn__14365@4a5c7944"]) "as:AnswerIslandsOnSide" 1 (:?acc :?sub) #object[clojure.core$eval14369$fn__14370 0x250f60ee "clojure.core$eval14369$fn__14370@250f60ee"])
(101 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:AnswerObjectsOnSide")
(102 x 46 ((Question :? :? :? :? "what-is" :? :?sub :? :?) nil nil) "as:AnswerObjectsOnSide" 2 (:?aml :?pll :?sub :?fids :?nal) #object[clojure.core$eval14373$fn__14374 0x679ec560 "clojure.core$eval14373$fn__14374@679ec560"])
(103 e 6 ((Answer :?acc :?) nil nil) "as:AnswerNearbyIslands")
(104 x 8 ((Question :? :? :? :? "nearby-islands" :? :? :? :?) nil nil) "as:AnswerNearbyIslands" 1 (:?acc :?fids) #object[clojure.core$eval14377$fn__14378 0x3f3ef13c "clojure.core$eval14377$fn__14378@3f3ef13c"])
(105 e 7 ((Answer2 :?aml :?nal :?pll :?) nil nil) "as:AnswerNearbyTypes")
(106 x 9 ((Question :? :? :? :? "nearby-types" :? :? :? :?) nil nil) "as:AnswerNearbyTypes" 1 (:?aml :?pll :?fids :?nal) #object[clojure.core$eval14381$fn__14382 0x68607ea4 "clojure.core$eval14381$fn__14382@68607ea4"])
(107 e 6 ((Answer :?acc :?) nil nil) "as:AnswerNearbyObjects")
(108 x 10 ((Question :? :? :? :? "nearby-objects" :? :? :? :?) nil nil) "as:AnswerNearbyObjects" 1 (:?acc :?fids) #object[clojure.core$eval14385$fn__14386 0x6fe8627 "clojure.core$eval14385$fn__14386@6fe8627"])
(109 e 6 ((Answer :?acc :?) nil nil) "as:AnswerIslandsBehind")
(110 x 36 ((Question :? :? :?tit :? "what-is" :? "behind the island" :? :?) nil nil) "as:AnswerIslandsBehind" 1 (:?tit :?acc :?fids) #object[clojure.core$eval14389$fn__14390 0x3414c20f "clojure.core$eval14389$fn__14390@3414c20f"])
(111 e 6 ((Answer :?acc :?) nil nil) "as:AnswerIslandsBefore")
(112 x 37 ((Question :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 1 (:?tit :?acc :?fids) #object[clojure.core$eval14393$fn__14394 0x1218dc4 "clojure.core$eval14393$fn__14394@1218dc4"])
(113 e 6 ((Answer :?acc :?) nil nil) "as:AnswerIslandsBefore")
(114 x 37 ((Question :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 1 (:?tit :?acc :?fids) #object[clojure.core$eval14397$fn__14398 0x1cc20a55 "clojure.core$eval14397$fn__14398@1cc20a55"])
