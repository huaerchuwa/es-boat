(0 e 0 ((Island :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteIsland")
(1 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval19588$fn__19589 0x9ed9086 "clojure.core$eval19588$fn__19589@9ed9086"]) "as:RetractObsoleteIsland" 12 (:?fids) #object[clojure.core$eval19592$fn__19593 0x6efadd0a "clojure.core$eval19592$fn__19593@6efadd0a"])
(2 e 2 ((NamedObject :? :? :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteObjects")
(3 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval19596$fn__19597 0xc1dc020 "clojure.core$eval19596$fn__19597@c1dc020"]) "as:RetractObsoleteObjects" 12 (:?fids) #object[clojure.core$eval19600$fn__19601 0x55976d6d "clojure.core$eval19600$fn__19601@55976d6d"])
(4 e 1 ((OSMData :? :?crd1 :?rad :?tim1 :?vol) nil nil) "as:CheckOSMData")
(5 x 3 ((Question :? :?crd2 :? :? :? :? :? :? :? :?tim2) (:?tim2 :?crd2 :?vol :?crd1 :?tim1) #object[clojure.core$eval19604$fn__19605 0x3091ebcc "clojure.core$eval19604$fn__19605@3091ebcc"]) "as:CheckOSMData" 12 (:?rad :?crd2 :?fids) #object[clojure.core$eval19612$fn__19613 0x77fef72e "clojure.core$eval19612$fn__19613@77fef72e"])
(6 e 4 ((NearbyObjects :? :? :? :? :?tim1) nil nil) "as:AssertNearbyObjects")
(7 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(8 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval19616$fn__19617 0x6433ebdf "clojure.core$eval19616$fn__19617@6433ebdf"]) "as:AssertNearbyObjects" 11 (:?tim2 :?fids) #object[clojure.core$eval19622$fn__19623 0x3f3f8082 "clojure.core$eval19622$fn__19623@3f3f8082"])
(9 e 5 ((NearbyIslands :? :? :?tim1) nil nil) "as:AssertNearbyIslands")
(10 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(11 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval19650$fn__19651 0x2e11f632 "clojure.core$eval19650$fn__19651@2e11f632"]) "as:AssertNearbyIslands" 11 (:?tim2 :?crs :?bco :?fids) #object[clojure.core$eval19656$fn__19657 0x46eab27c "clojure.core$eval19656$fn__19657@46eab27c"])
(12 e 0 ((Island :? :?ico :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordIsland")
(13 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval19669$fn__19670 0x2ba38170 "clojure.core$eval19669$fn__19670@2ba38170"]) "as:UpdatePolarCoordIsland" 11 (:?tim2 :?crs :?bco :?ico :?fids) #object[clojure.core$eval19674$fn__19675 0x75aa1492 "clojure.core$eval19674$fn__19675@75aa1492"])
(14 e 2 ((NamedObject :? :? :?oco :? :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordObject")
(15 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval19678$fn__19679 0x27eaca71 "clojure.core$eval19678$fn__19679@27eaca71"]) "as:UpdatePolarCoordObject" 11 (:?tim2 :?crs :?bco :?oco :?fids) #object[clojure.core$eval19683$fn__19684 0x64c188b6 "clojure.core$eval19683$fn__19684@64c188b6"])
(16 e 6 ((Answer :? :? :?tim1) nil nil) "as:InitAnswer")
(17 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval19687$fn__19688 0x1c05b9f5 "clojure.core$eval19687$fn__19688@1c05b9f5"]) "as:InitAnswer" 11 (:?tim2 :?fids) #object[clojure.core$eval19691$fn__19692 0x6e2ad1e1 "clojure.core$eval19691$fn__19692@6e2ad1e1"])
(18 e 7 ((Answer2 :? :? :? :? :?tim1) nil nil) "as:InitAnswer2")
(19 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval19695$fn__19696 0x4737fbc4 "clojure.core$eval19695$fn__19696@4737fbc4"]) "as:InitAnswer2" 11 (:?tim2 :?fids) #object[clojure.core$eval19699$fn__19700 0x35cfe12c "clojure.core$eval19699$fn__19700@35cfe12c"])
(20 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAhead_Isl")
(21 i 8 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(22 x 9 ((Island :? :? :?pol :? "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval19703$fn__19704 0x507f0feb "clojure.core$eval19703$fn__19704@507f0feb"])
(23 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAhead_Obj")
(24 i 8 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(25 x 10 ((NamedObject :? :?ame :? :?nat :?pla :?pol "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval19707$fn__19708 0x49a4239d "clojure.core$eval19707$fn__19708@49a4239d"])
(26 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAstern_Isl")
(27 i 11 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(28 x 12 ((Island :? :? :?pol :? "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval19711$fn__19712 0x2f8fa5fa "clojure.core$eval19711$fn__19712@2f8fa5fa"])
(29 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAstern_Obj")
(30 i 11 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(31 x 13 ((NamedObject :? :?ame :? :?nat :?pla :?pol "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval19715$fn__19716 0x4a5880c2 "clojure.core$eval19715$fn__19716@4a5880c2"])
(32 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortAbaft_Isl")
(33 i 14 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(34 x 15 ((Island :? :? :?pol :? "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval19719$fn__19720 0xad9887b "clojure.core$eval19719$fn__19720@ad9887b"])
(35 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortAbaft_Obj")
(36 i 14 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(37 x 16 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval19723$fn__19724 0x3baea3af "clojure.core$eval19723$fn__19724@3baea3af"])
(38 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBeam_Isl")
(39 i 17 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(40 x 18 ((Island :? :? :?pol :? "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval19727$fn__19728 0x41229715 "clojure.core$eval19727$fn__19728@41229715"])
(41 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBeam_Obj")
(42 i 17 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(43 x 19 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval19731$fn__19732 0x71279d66 "clojure.core$eval19731$fn__19732@71279d66"])
(44 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBow_Isl")
(45 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(46 x 21 ((Island :? :? :?pol :? "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval19735$fn__19736 0x304e658 "clojure.core$eval19735$fn__19736@304e658"])
(47 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBow_Obj")
(48 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(49 x 22 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval19739$fn__19740 0x1c3661a5 "clojure.core$eval19739$fn__19740@1c3661a5"])
(50 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarAbaft_Isl")
(51 i 23 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(52 x 24 ((Island :? :? :?pol :? "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval19743$fn__19744 0x2738bdc2 "clojure.core$eval19743$fn__19744@2738bdc2"])
(53 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarAbaft_Obj")
(54 i 23 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(55 x 25 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval19747$fn__19748 0xf53eca8 "clojure.core$eval19747$fn__19748@f53eca8"])
(56 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBeam_Isl")
(57 i 26 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(58 x 27 ((Island :? :? :?pol :? "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval19751$fn__19752 0x3c39d72f "clojure.core$eval19751$fn__19752@3c39d72f"])
(59 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBeam_Obj")
(60 i 26 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(61 x 28 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval19755$fn__19756 0x63c8f995 "clojure.core$eval19755$fn__19756@63c8f995"])
(62 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBow_Isl")
(63 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(64 x 30 ((Island :? :? :?pol :? "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval19759$fn__19760 0x39b6827d "clojure.core$eval19759$fn__19760@39b6827d"])
(65 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBow_Obj")
(66 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(67 x 31 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval19763$fn__19764 0x1c9e09f6 "clojure.core$eval19763$fn__19764@1c9e09f6"])
(68 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyIslands")
(69 i 32 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil))
(70 x 0 ((Island :? :? :? :? :? :? :?tit) nil nil) "as:NearbyIslands" 10 (:?tit :?acc) #object[clojure.core$eval19767$fn__19768 0x11ed903d "clojure.core$eval19767$fn__19768@11ed903d"])
(71 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBehind")
(72 i 33 ((Question :? :? :? :?tit1 :? "what-is" :? "behind the island" :? :?) nil nil))
(73 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(74 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval19771$fn__19772 0x707b66d1 "clojure.core$eval19771$fn__19772@707b66d1"]) "as:IslandsBehind" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval19775$fn__19776 0x5cb0fa2a "clojure.core$eval19775$fn__19776@5cb0fa2a"])
(75 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBefore")
(76 i 34 ((Question :? :? :? :?tit1 :? "what-is" :? "before the island" :? :?) nil nil))
(77 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(78 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval19779$fn__19780 0x6e6a9985 "clojure.core$eval19779$fn__19780@6e6a9985"]) "as:IslandsBefore" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval19783$fn__19784 0x4660623c "clojure.core$eval19783$fn__19784@4660623c"])
(79 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsIsland")
(80 i 35 ((Question :? :? :? :?tit :? "where-is" :? "island" :? :?) nil nil))
(81 x 0 ((Island :? :?crd :?pol :?sec :?sid :? :?tit) nil nil) "as:WhereIsIsland" 10 (:?sid :?pol :?tit :?crd :?rad :?fids) #object[clojure.core$eval19787$fn__19788 0x178a1422 "clojure.core$eval19787$fn__19788@178a1422"])
(82 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsOnSide")
(83 x 36 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) (:?sub) #object[clojure.core$eval19794$fn__19795 0x1f92b864 "clojure.core$eval19794$fn__19795@1f92b864"]) "as:AnswerIslandsOnSide" 9 (:?acc :?sub) #object[clojure.core$eval19799$fn__19800 0x16a1da7e "clojure.core$eval19799$fn__19800@16a1da7e"])
(84 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerObjectsOnSide")
(85 x 36 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) nil nil) "as:AnswerObjectsOnSide" 8 (:?aml :?pll :?sub :?fids :?nal) #object[clojure.core$eval19803$fn__19804 0x50cfcff8 "clojure.core$eval19803$fn__19804@50cfcff8"])
(86 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyIslands")
(87 x 32 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil) "as:AnswerNearbyIslands" 9 (:?acc) #object[clojure.core$eval19807$fn__19808 0x34b99310 "clojure.core$eval19807$fn__19808@34b99310"])
(88 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerNearbyObjects")
(89 x 37 ((Question :? :? :? :? :? "nearby-objects" :? :?sub :? :?) nil nil) "as:AnswerNearbyObjects" 8 (:?aml :?pll :?sub :?fids :?nal) #object[clojure.core$eval19811$fn__19812 0x141191ab "clojure.core$eval19811$fn__19812@141191ab"])
(90 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBehind")
(91 x 33 ((Question :? :? :? :?tit :? "what-is" :? "behind the island" :? :?) nil nil) "as:AnswerIslandsBehind" 9 (:?tit :?acc :?fids) #object[clojure.core$eval19817$fn__19818 0x5229ee8c "clojure.core$eval19817$fn__19818@5229ee8c"])
(92 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(93 x 34 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval19821$fn__19822 0xbf5fa43 "clojure.core$eval19821$fn__19822@bf5fa43"])
(94 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(95 x 34 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval19825$fn__19826 0x202825b4 "clojure.core$eval19825$fn__19826@202825b4"])
