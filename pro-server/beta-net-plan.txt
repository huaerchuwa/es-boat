(0 e 0 ((Island :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteIsland")
(1 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval13504$fn__13505 0x44c9a1e6 "clojure.core$eval13504$fn__13505@44c9a1e6"]) "as:RetractObsoleteIsland" 12 (:?fids) #object[clojure.core$eval13508$fn__13509 0x715dc32d "clojure.core$eval13508$fn__13509@715dc32d"])
(2 e 2 ((NamedObject :? :? :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteObjects")
(3 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval13512$fn__13513 0x484098f9 "clojure.core$eval13512$fn__13513@484098f9"]) "as:RetractObsoleteObjects" 12 (:?fids) #object[clojure.core$eval13516$fn__13517 0x8b21c6d "clojure.core$eval13516$fn__13517@8b21c6d"])
(4 e 1 ((OSMData :? :?crd1 :?rad :?tim1 :?vol) nil nil) "as:CheckOSMData")
(5 x 3 ((Question :? :?crd2 :? :? :? :? :? :? :? :?tim2) (:?tim2 :?crd2 :?vol :?crd1 :?tim1) #object[clojure.core$eval13520$fn__13521 0x1fbe9b82 "clojure.core$eval13520$fn__13521@1fbe9b82"]) "as:CheckOSMData" 12 (:?rad :?crd2 :?fids) #object[clojure.core$eval13528$fn__13529 0x56653457 "clojure.core$eval13528$fn__13529@56653457"])
(6 e 4 ((NearbyObjects :? :? :? :? :?tim1) nil nil) "as:AssertNearbyObjects")
(7 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(8 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval13532$fn__13533 0x50005873 "clojure.core$eval13532$fn__13533@50005873"]) "as:AssertNearbyObjects" 11 (:?tim2 :?fids) #object[clojure.core$eval13538$fn__13539 0x376e5cb3 "clojure.core$eval13538$fn__13539@376e5cb3"])
(9 e 5 ((NearbyIslands :? :? :?tim1) nil nil) "as:AssertNearbyIslands")
(10 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(11 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval13566$fn__13567 0x559143f7 "clojure.core$eval13566$fn__13567@559143f7"]) "as:AssertNearbyIslands" 11 (:?tim2 :?crs :?bco :?fids) #object[clojure.core$eval13572$fn__13573 0x6ca1156b "clojure.core$eval13572$fn__13573@6ca1156b"])
(12 e 0 ((Island :? :?ico :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordIsland")
(13 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval13585$fn__13586 0x3be64eca "clojure.core$eval13585$fn__13586@3be64eca"]) "as:UpdatePolarCoordIsland" 11 (:?tim2 :?crs :?bco :?ico :?fids) #object[clojure.core$eval13590$fn__13591 0x15b54ae "clojure.core$eval13590$fn__13591@15b54ae"])
(14 e 2 ((NamedObject :? :? :?oco :? :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordObject")
(15 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval13594$fn__13595 0x319f80b7 "clojure.core$eval13594$fn__13595@319f80b7"]) "as:UpdatePolarCoordObject" 11 (:?tim2 :?crs :?bco :?oco :?fids) #object[clojure.core$eval13599$fn__13600 0xaf0cef2 "clojure.core$eval13599$fn__13600@af0cef2"])
(16 e 6 ((Answer :? :? :?tim1) nil nil) "as:InitAnswer")
(17 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval13603$fn__13604 0x1f457f3e "clojure.core$eval13603$fn__13604@1f457f3e"]) "as:InitAnswer" 11 (:?tim2 :?fids) #object[clojure.core$eval13607$fn__13608 0x346419f2 "clojure.core$eval13607$fn__13608@346419f2"])
(18 e 7 ((Answer2 :? :? :? :? :?tim1) nil nil) "as:InitAnswer2")
(19 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval13611$fn__13612 0x7f19c59e "clojure.core$eval13611$fn__13612@7f19c59e"]) "as:InitAnswer2" 11 (:?tim2 :?fids) #object[clojure.core$eval13615$fn__13616 0x1b8d5cd5 "clojure.core$eval13615$fn__13616@1b8d5cd5"])
(20 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyIslands")
(21 i 8 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil))
(22 x 0 ((Island :? :? :? :? :? :? :?tit) nil nil) "as:NearbyIslands" 10 (:?tit :?acc) #object[clojure.core$eval13619$fn__13620 0x42a96f44 "clojure.core$eval13619$fn__13620@42a96f44"])
(23 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:NearbyTypes")
(24 i 9 ((Question :? :? :? :? :? "nearby-types" :? :? :? :?) nil nil))
(25 x 2 ((NamedObject :? :?ame :? :?nat :?pla :? :? :? :?tit) nil nil) "as:NearbyTypes" 10 (:?aml :?ame :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13623$fn__13624 0x29633386 "clojure.core$eval13623$fn__13624@29633386"])
(26 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyObjects")
(27 i 10 ((Question :? :? :? :? :? "nearby-objects" :? :?sub :? :?) nil nil))
(28 x 2 ((NamedObject :? :?ame :? :?nat :?pla :? :? :? :?tit) nil nil) "as:NearbyObjects" 10 (:?ame :?tit :?acc :?pla :?sub :?nat) #object[clojure.core$eval13627$fn__13628 0x69ffb452 "clojure.core$eval13627$fn__13628@69ffb452"])
(29 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAhead_Isl")
(30 i 11 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(31 x 12 ((Island :? :? :?pol :? "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13633$fn__13634 0x71fa43a8 "clojure.core$eval13633$fn__13634@71fa43a8"])
(32 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAhead_Obj")
(33 i 11 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(34 x 13 ((NamedObject :? :?ame :? :?nat :?pla :?pol "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13637$fn__13638 0x45b9e146 "clojure.core$eval13637$fn__13638@45b9e146"])
(35 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAstern_Isl")
(36 i 14 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(37 x 15 ((Island :? :? :?pol :? "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13641$fn__13642 0x32e24827 "clojure.core$eval13641$fn__13642@32e24827"])
(38 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAstern_Obj")
(39 i 14 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(40 x 16 ((NamedObject :? :?ame :? :?nat :?pla :?pol "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13645$fn__13646 0x5897d62b "clojure.core$eval13645$fn__13646@5897d62b"])
(41 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortAbaft_Isl")
(42 i 17 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(43 x 18 ((Island :? :? :?pol :? "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13649$fn__13650 0x1a0a1c66 "clojure.core$eval13649$fn__13650@1a0a1c66"])
(44 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortAbaft_Obj")
(45 i 17 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(46 x 19 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13653$fn__13654 0x4c087c25 "clojure.core$eval13653$fn__13654@4c087c25"])
(47 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBeam_Isl")
(48 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(49 x 21 ((Island :? :? :?pol :? "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13657$fn__13658 0x17b9fbfa "clojure.core$eval13657$fn__13658@17b9fbfa"])
(50 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBeam_Obj")
(51 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(52 x 22 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13661$fn__13662 0x26228607 "clojure.core$eval13661$fn__13662@26228607"])
(53 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBow_Isl")
(54 i 23 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(55 x 24 ((Island :? :? :?pol :? "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13665$fn__13666 0x4b5ebe29 "clojure.core$eval13665$fn__13666@4b5ebe29"])
(56 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBow_Obj")
(57 i 23 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(58 x 25 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13669$fn__13670 0x3f029be4 "clojure.core$eval13669$fn__13670@3f029be4"])
(59 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarAbaft_Isl")
(60 i 26 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(61 x 27 ((Island :? :? :?pol :? "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13673$fn__13674 0x47bc83a1 "clojure.core$eval13673$fn__13674@47bc83a1"])
(62 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarAbaft_Obj")
(63 i 26 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(64 x 28 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13677$fn__13678 0x694ad20f "clojure.core$eval13677$fn__13678@694ad20f"])
(65 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBeam_Isl")
(66 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(67 x 30 ((Island :? :? :?pol :? "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13681$fn__13682 0x65425b36 "clojure.core$eval13681$fn__13682@65425b36"])
(68 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBeam_Obj")
(69 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(70 x 31 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13685$fn__13686 0xbcec9d6 "clojure.core$eval13685$fn__13686@bcec9d6"])
(71 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBow_Isl")
(72 i 32 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(73 x 33 ((Island :? :? :?pol :? "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval13689$fn__13690 0x471a7552 "clojure.core$eval13689$fn__13690@471a7552"])
(74 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBow_Obj")
(75 i 32 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(76 x 34 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval13693$fn__13694 0xa6192b "clojure.core$eval13693$fn__13694@a6192b"])
(77 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBehind")
(78 i 35 ((Question :? :? :? :?tit1 :? "what-is" :? "behind the island" :? :?) nil nil))
(79 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(80 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval13697$fn__13698 0x3618a3fa "clojure.core$eval13697$fn__13698@3618a3fa"]) "as:IslandsBehind" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval13701$fn__13702 0x516f944a "clojure.core$eval13701$fn__13702@516f944a"])
(81 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBefore")
(82 i 36 ((Question :? :? :? :?tit1 :? "what-is" :? "before the island" :? :?) nil nil))
(83 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(84 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval13705$fn__13706 0x6bbb4385 "clojure.core$eval13705$fn__13706@6bbb4385"]) "as:IslandsBefore" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval13709$fn__13710 0x29a3bde4 "clojure.core$eval13709$fn__13710@29a3bde4"])
(85 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsIsland")
(86 i 37 ((Question :? :? :? :?tit :? "where-is" :? "island" :? :?) nil nil))
(87 x 0 ((Island :? :?crd :?pol :? :?sid :? :?tit) nil nil) "as:WhereIsIsland" 10 (:?sid :?pol :?tit :?crd :?rad :?fids) #object[clojure.core$eval13713$fn__13714 0x7062fd73 "clojure.core$eval13713$fn__13714@7062fd73"])
(88 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsObject")
(89 i 38 ((Question :? :? :? :? :? "where-is" :? :?sub :?suv :?) nil nil))
(90 x 2 ((NamedObject :? :? :?crd :? :? :?pol :?sid :? :?suv) nil nil) "as:WhereIsObject" 10 (:?sid :?pol :?crd :?rad :?sub :?fids :?suv) #object[clojure.core$eval13720$fn__13721 0x9eb90d1 "clojure.core$eval13720$fn__13721@9eb90d1"])
(91 ex 39 ((Question :? :?crd :? :? :? "what-is" :? "weather" :? :?) nil nil) "as:Weather" 10 (:?crd :?fids) #object[clojure.core$eval13727$fn__13728 0x3ea249f3 "clojure.core$eval13727$fn__13728@3ea249f3"])
(92 ex 40 ((Question :? :?crd :? :? :? "wiki-tells" :? "about" :? :?) nil nil) "as:WikiTellsAbout" 10 (:?crd :?fids) #object[clojure.core$eval13731$fn__13732 0x72bddee7 "clojure.core$eval13731$fn__13732@72bddee7"])
(93 ex 41 ((Question :? :? :? :? :? "about" :? "thing" :?sval :?) nil nil) "as:AboutThing" 10 (:?fids :?sval) #object[clojure.core$eval13735$fn__13736 0x26c716d8 "clojure.core$eval13735$fn__13736@26c716d8"])
(94 ex 42 ((Question :? :? :? :?tit :? "about" :? "island" :? :?) nil nil) "as:AboutIsland" 10 (:?tit :?fids) #object[clojure.core$eval13739$fn__13740 0x606e899 "clojure.core$eval13739$fn__13740@606e899"])
(95 ex 43 ((Question :? :? :? :? :? "about" :? :?sub :?suv :?) (:?sub) #object[clojure.core$eval13743$fn__13744 0x515208bb "clojure.core$eval13743$fn__13744@515208bb"]) "as:AboutObject" 10 (:?sub :?fids :?suv) #object[clojure.core$eval13747$fn__13748 0x74552270 "clojure.core$eval13747$fn__13748@74552270"])
(96 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsOnSide")
(97 x 44 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) (:?sub) #object[clojure.core$eval13751$fn__13752 0x718fa2e1 "clojure.core$eval13751$fn__13752@718fa2e1"]) "as:AnswerIslandsOnSide" 9 (:?acc :?sub) #object[clojure.core$eval13756$fn__13757 0x262acc21 "clojure.core$eval13756$fn__13757@262acc21"])
(98 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerObjectsOnSide")
(99 x 44 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) nil nil) "as:AnswerObjectsOnSide" 8 (:?aml :?pll :?sub :?fids :?nal) #object[clojure.core$eval13760$fn__13761 0xb830ac8 "clojure.core$eval13760$fn__13761@b830ac8"])
(100 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyIslands")
(101 x 8 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil) "as:AnswerNearbyIslands" 9 (:?acc :?fids) #object[clojure.core$eval13764$fn__13765 0x6aef80 "clojure.core$eval13764$fn__13765@6aef80"])
(102 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerNearbyTypes")
(103 x 9 ((Question :? :? :? :? :? "nearby-types" :? :? :? :?) nil nil) "as:AnswerNearbyTypes" 9 (:?aml :?pll :?fids :?nal) #object[clojure.core$eval13768$fn__13769 0x518a6450 "clojure.core$eval13768$fn__13769@518a6450"])
(104 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyObjects")
(105 x 10 ((Question :? :? :? :? :? "nearby-objects" :? :? :? :?) nil nil) "as:AnswerNearbyObjects" 9 (:?acc :?fids) #object[clojure.core$eval13772$fn__13773 0x6e2a878e "clojure.core$eval13772$fn__13773@6e2a878e"])
(106 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBehind")
(107 x 35 ((Question :? :? :? :?tit :? "what-is" :? "behind the island" :? :?) nil nil) "as:AnswerIslandsBehind" 9 (:?tit :?acc :?fids) #object[clojure.core$eval13776$fn__13777 0x126bfb2e "clojure.core$eval13776$fn__13777@126bfb2e"])
(108 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(109 x 36 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval13780$fn__13781 0x71703a07 "clojure.core$eval13780$fn__13781@71703a07"])
(110 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(111 x 36 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval13784$fn__13785 0x611a3184 "clojure.core$eval13784$fn__13785@611a3184"])
