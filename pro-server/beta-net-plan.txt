(0 e 0 ((Island :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteIsland")
(1 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval11704$fn__11705 0x4e3a6e56 "clojure.core$eval11704$fn__11705@4e3a6e56"]) "as:RetractObsoleteIsland" 12 (:?fids) #object[clojure.core$eval11708$fn__11709 0x271c3af1 "clojure.core$eval11708$fn__11709@271c3af1"])
(2 e 2 ((NamedObject :? :? :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteObjects")
(3 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval11712$fn__11713 0x58add31 "clojure.core$eval11712$fn__11713@58add31"]) "as:RetractObsoleteObjects" 12 (:?fids) #object[clojure.core$eval11716$fn__11717 0x2431e7fa "clojure.core$eval11716$fn__11717@2431e7fa"])
(4 e 1 ((OSMData :? :?crd1 :?rad :?tim1 :?vol) nil nil) "as:CheckOSMData")
(5 x 3 ((Question :? :?crd2 :? :? :? :? :? :? :? :?tim2) (:?tim2 :?crd2 :?vol :?crd1 :?tim1) #object[clojure.core$eval11720$fn__11721 0x71f5b8b3 "clojure.core$eval11720$fn__11721@71f5b8b3"]) "as:CheckOSMData" 12 (:?rad :?crd2 :?fids) #object[clojure.core$eval11728$fn__11729 0x4ef849ff "clojure.core$eval11728$fn__11729@4ef849ff"])
(6 e 4 ((NearbyObjects :? :? :? :? :?tim1) nil nil) "as:AssertNearbyObjects")
(7 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(8 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval11732$fn__11733 0x6bf8fcf7 "clojure.core$eval11732$fn__11733@6bf8fcf7"]) "as:AssertNearbyObjects" 11 (:?tim2 :?fids) #object[clojure.core$eval11738$fn__11739 0x1590d0a1 "clojure.core$eval11738$fn__11739@1590d0a1"])
(9 e 5 ((NearbyIslands :? :? :?tim1) nil nil) "as:AssertNearbyIslands")
(10 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(11 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval11766$fn__11767 0x206635de "clojure.core$eval11766$fn__11767@206635de"]) "as:AssertNearbyIslands" 11 (:?tim2 :?crs :?bco :?fids) #object[clojure.core$eval11772$fn__11773 0xfdf0826 "clojure.core$eval11772$fn__11773@fdf0826"])
(12 e 0 ((Island :? :?ico :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordIsland")
(13 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval11785$fn__11786 0x4aab66aa "clojure.core$eval11785$fn__11786@4aab66aa"]) "as:UpdatePolarCoordIsland" 11 (:?tim2 :?crs :?bco :?ico :?fids) #object[clojure.core$eval11790$fn__11791 0x1be79109 "clojure.core$eval11790$fn__11791@1be79109"])
(14 e 2 ((NamedObject :? :? :?oco :? :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordObject")
(15 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval11794$fn__11795 0x6e157a1a "clojure.core$eval11794$fn__11795@6e157a1a"]) "as:UpdatePolarCoordObject" 11 (:?tim2 :?crs :?bco :?oco :?fids) #object[clojure.core$eval11799$fn__11800 0x17150f23 "clojure.core$eval11799$fn__11800@17150f23"])
(16 e 6 ((Answer :? :? :?tim1) nil nil) "as:InitAnswer")
(17 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval11803$fn__11804 0x17699118 "clojure.core$eval11803$fn__11804@17699118"]) "as:InitAnswer" 11 (:?tim2 :?fids) #object[clojure.core$eval11807$fn__11808 0x79625d90 "clojure.core$eval11807$fn__11808@79625d90"])
(18 e 7 ((Answer2 :? :? :? :? :?tim1) nil nil) "as:InitAnswer2")
(19 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval11811$fn__11812 0x7dc11c12 "clojure.core$eval11811$fn__11812@7dc11c12"]) "as:InitAnswer2" 11 (:?tim2 :?fids) #object[clojure.core$eval11815$fn__11816 0x255d77a5 "clojure.core$eval11815$fn__11816@255d77a5"])
(20 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAhead_Isl")
(21 i 8 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(22 x 9 ((Island :? :? :?pol :? "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11819$fn__11820 0x1ae7c933 "clojure.core$eval11819$fn__11820@1ae7c933"])
(23 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAhead_Obj")
(24 i 8 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(25 x 10 ((NamedObject :? :?ame :? :?nat :?pla :?pol "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11823$fn__11824 0x5ac1649e "clojure.core$eval11823$fn__11824@5ac1649e"])
(26 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAstern_Isl")
(27 i 11 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(28 x 12 ((Island :? :? :?pol :? "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11827$fn__11828 0x691bfea5 "clojure.core$eval11827$fn__11828@691bfea5"])
(29 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsAstern_Obj")
(30 i 11 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(31 x 13 ((NamedObject :? :?ame :? :?nat :?pla :?pol "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11831$fn__11832 0x2d7304a0 "clojure.core$eval11831$fn__11832@2d7304a0"])
(32 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortAbaft_Isl")
(33 i 14 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(34 x 15 ((Island :? :? :?pol :? "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11835$fn__11836 0x60dcdd22 "clojure.core$eval11835$fn__11836@60dcdd22"])
(35 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortAbaft_Obj")
(36 i 14 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(37 x 16 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11839$fn__11840 0x4f4041c4 "clojure.core$eval11839$fn__11840@4f4041c4"])
(38 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBeam_Isl")
(39 i 17 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(40 x 18 ((Island :? :? :?pol :? "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11843$fn__11844 0x71a530f0 "clojure.core$eval11843$fn__11844@71a530f0"])
(41 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBeam_Obj")
(42 i 17 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(43 x 19 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11847$fn__11848 0x2e5f5062 "clojure.core$eval11847$fn__11848@2e5f5062"])
(44 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBow_Isl")
(45 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(46 x 21 ((Island :? :? :?pol :? "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11851$fn__11852 0x7bd64ee "clojure.core$eval11851$fn__11852@7bd64ee"])
(47 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsPortBow_Obj")
(48 i 20 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(49 x 22 ((NamedObject :? :?ame :? :?nat :?pla :?pol "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11855$fn__11856 0xfa84af5 "clojure.core$eval11855$fn__11856@fa84af5"])
(50 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarAbaft_Isl")
(51 i 23 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(52 x 24 ((Island :? :? :?pol :? "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11859$fn__11860 0x1f08b925 "clojure.core$eval11859$fn__11860@1f08b925"])
(53 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarAbaft_Obj")
(54 i 23 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(55 x 25 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11863$fn__11864 0x72922382 "clojure.core$eval11863$fn__11864@72922382"])
(56 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBeam_Isl")
(57 i 26 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(58 x 27 ((Island :? :? :?pol :? "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11867$fn__11868 0x599fdfbf "clojure.core$eval11867$fn__11868@599fdfbf"])
(59 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBeam_Obj")
(60 i 26 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(61 x 28 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11871$fn__11872 0x2216c9d9 "clojure.core$eval11871$fn__11872@2216c9d9"])
(62 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBow_Isl")
(63 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(64 x 30 ((Island :? :? :?pol :? "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Isl" 10 (:?pol :?tit :?acc) #object[clojure.core$eval11875$fn__11876 0x7a3637fd "clojure.core$eval11875$fn__11876@7a3637fd"])
(65 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:WhatIsStarBow_Obj")
(66 i 29 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(67 x 31 ((NamedObject :? :?ame :? :?nat :?pla :?pol "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow_Obj" 10 (:?aml :?ame :?pol :?tit :?pll :?pla :?nat :?nal) #object[clojure.core$eval11879$fn__11880 0x6c80d23a "clojure.core$eval11879$fn__11880@6c80d23a"])
(68 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyIslands")
(69 i 32 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil))
(70 x 0 ((Island :? :? :? :? :? :? :?tit) nil nil) "as:NearbyIslands" 10 (:?tit :?acc) #object[clojure.core$eval11883$fn__11884 0x358ba4 "clojure.core$eval11883$fn__11884@358ba4"])
(71 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBehind")
(72 i 33 ((Question :? :? :? :?tit1 :? "what-is" :? "behind the island" :? :?) nil nil))
(73 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(74 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval11887$fn__11888 0x176420ba "clojure.core$eval11887$fn__11888@176420ba"]) "as:IslandsBehind" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval11891$fn__11892 0x7129682d "clojure.core$eval11891$fn__11892@7129682d"])
(75 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBefore")
(76 i 34 ((Question :? :? :? :?tit1 :? "what-is" :? "before the island" :? :?) nil nil))
(77 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(78 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval11895$fn__11896 0x11ee0b47 "clojure.core$eval11895$fn__11896@11ee0b47"]) "as:IslandsBefore" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval11899$fn__11900 0x1a112e6e "clojure.core$eval11899$fn__11900@1a112e6e"])
(79 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsIsland")
(80 i 35 ((Question :? :? :? :?tit :? "where-is" :? "island" :? :?) nil nil))
(81 x 0 ((Island :? :?crd :?pol :?sec :?sid :? :?tit) nil nil) "as:WhereIsIsland" 10 (:?sid :?pol :?tit :?crd :?rad :?fids) #object[clojure.core$eval11903$fn__11904 0x10099169 "clojure.core$eval11903$fn__11904@10099169"])
(82 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsOnSide")
(83 x 36 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) (:?sub) #object[clojure.core$eval11910$fn__11911 0x505e1d38 "clojure.core$eval11910$fn__11911@505e1d38"]) "as:AnswerIslandsOnSide" 9 (:?acc :?sub) #object[clojure.core$eval11915$fn__11916 0x1913a4dc "clojure.core$eval11915$fn__11916@1913a4dc"])
(84 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerObjectsOnSide")
(85 x 36 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) nil nil) "as:AnswerObjectsOnSide" 8 (:?aml :?pll :?sub :?fids :?nal) #object[clojure.core$eval11919$fn__11920 0x4ac904ad "clojure.core$eval11919$fn__11920@4ac904ad"])
(86 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyIslands")
(87 x 32 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil) "as:AnswerNearbyIslands" 9 (:?acc) #object[clojure.core$eval11923$fn__11924 0x373ccc9a "clojure.core$eval11923$fn__11924@373ccc9a"])
(88 e 7 ((Answer2 :? :?aml :?nal :?pll :?) nil nil) "as:AnswerNearbyObjects")
(89 x 37 ((Question :? :? :? :? :? "nearby-objects" :? :?sub :? :?) nil nil) "as:AnswerNearbyObjects" 8 (:?aml :?pll :?sub :?fids :?nal) #object[clojure.core$eval11927$fn__11928 0x7c8ba8eb "clojure.core$eval11927$fn__11928@7c8ba8eb"])
(90 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBehind")
(91 x 33 ((Question :? :? :? :?tit :? "what-is" :? "behind the island" :? :?) nil nil) "as:AnswerIslandsBehind" 9 (:?tit :?acc :?fids) #object[clojure.core$eval11933$fn__11934 0x4a41c542 "clojure.core$eval11933$fn__11934@4a41c542"])
(92 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(93 x 34 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval11937$fn__11938 0x5f095fae "clojure.core$eval11937$fn__11938@5f095fae"])
(94 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(95 x 34 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval11941$fn__11942 0x66a47790 "clojure.core$eval11941$fn__11942@66a47790"])
