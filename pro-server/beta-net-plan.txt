(0 e 0 ((Island :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteIsland")
(1 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval16715$fn__16716 0x2365f415 "clojure.core$eval16715$fn__16716@2365f415"]) "as:RetractObsoleteIsland" 12 (:?fids) #object[clojure.core$eval16719$fn__16720 0x4200a873 "clojure.core$eval16719$fn__16720@4200a873"])
(2 e 2 ((NamedObject :? :? :? :? :? :? :? :?tim1 :?) nil nil) "as:RetractObsoleteObjects")
(3 x 1 ((OSMData :? :? :? :?tim2 :?) (:?tim2 :?tim1) #object[clojure.core$eval16723$fn__16724 0x18f081a7 "clojure.core$eval16723$fn__16724@18f081a7"]) "as:RetractObsoleteObjects" 12 (:?fids) #object[clojure.core$eval16727$fn__16728 0x55b53acf "clojure.core$eval16727$fn__16728@55b53acf"])
(4 e 1 ((OSMData :? :?crd1 :?rad :?tim1 :?vol) nil nil) "as:CheckOSMData")
(5 x 3 ((Question :? :?crd2 :? :? :? :? :? :? :? :?tim2) (:?tim2 :?crd2 :?vol :?crd1 :?tim1) #object[clojure.core$eval16731$fn__16732 0x2ad4e2d "clojure.core$eval16731$fn__16732@2ad4e2d"]) "as:CheckOSMData" 12 (:?rad :?crd2 :?fids) #object[clojure.core$eval16739$fn__16740 0x14961f18 "clojure.core$eval16739$fn__16740@14961f18"])
(6 e 4 ((NearbyObjects :? :? :? :? :?tim1) nil nil) "as:AssertNearbyObjects")
(7 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(8 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval16743$fn__16744 0x3d2f0de5 "clojure.core$eval16743$fn__16744@3d2f0de5"]) "as:AssertNearbyObjects" 11 (:?tim2 :?fids) #object[clojure.core$eval16749$fn__16750 0x22dad2b7 "clojure.core$eval16749$fn__16750@22dad2b7"])
(9 e 5 ((NearbyIslands :? :? :?tim1) nil nil) "as:AssertNearbyIslands")
(10 i 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?) nil nil))
(11 x 1 ((OSMData :? :? :? :?tim2 :?vol) (:?tim2 :?bco :?vol :?tim1) #object[clojure.core$eval16777$fn__16778 0x1745b0a9 "clojure.core$eval16777$fn__16778@1745b0a9"]) "as:AssertNearbyIslands" 11 (:?tim2 :?crs :?bco :?fids) #object[clojure.core$eval16783$fn__16784 0x78935db1 "clojure.core$eval16783$fn__16784@78935db1"])
(12 e 0 ((Island :? :?ico :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordIsland")
(13 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval16796$fn__16797 0x6a61a6c9 "clojure.core$eval16796$fn__16797@6a61a6c9"]) "as:UpdatePolarCoordIsland" 11 (:?tim2 :?crs :?bco :?ico :?fids) #object[clojure.core$eval16801$fn__16802 0x4c46b4ca "clojure.core$eval16801$fn__16802@4c46b4ca"])
(14 e 2 ((NamedObject :? :? :?oco :? :? :? :? :?tim1 :?) nil nil) "as:UpdatePolarCoordObject")
(15 x 3 ((Question :? :?bco :?crs :? :? :? :? :? :? :?tim2) (:?tim2 :?bco :?tim1) #object[clojure.core$eval16805$fn__16806 0x1ae69404 "clojure.core$eval16805$fn__16806@1ae69404"]) "as:UpdatePolarCoordObject" 11 (:?tim2 :?crs :?bco :?oco :?fids) #object[clojure.core$eval16810$fn__16811 0x6f717bea "clojure.core$eval16810$fn__16811@6f717bea"])
(16 e 6 ((Answer :? :? :?tim1) nil nil) "as:InitAnswer")
(17 x 3 ((Question :? :? :? :? :? :? :? :? :? :?tim2) (:?tim2 :?tim1) #object[clojure.core$eval16814$fn__16815 0x4795e818 "clojure.core$eval16814$fn__16815@4795e818"]) "as:InitAnswer" 11 (:?tim2 :?fids) #object[clojure.core$eval16818$fn__16819 0x5d4dc4a1 "clojure.core$eval16818$fn__16819@5d4dc4a1"])
(18 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAhead")
(19 i 7 ((Question :? :? :? :? :? "what-is" :? "ahead" :? :?) nil nil))
(20 x 8 ((Island :? :? :?pol :? "AHEAD" :? :?tit) nil nil) "as:WhatIsAhead" 10 (:?pol :?tit :?acc) #object[clojure.core$eval16822$fn__16823 0x380eeb0 "clojure.core$eval16822$fn__16823@380eeb0"])
(21 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsAstern")
(22 i 9 ((Question :? :? :? :? :? "what-is" :? "astern" :? :?) nil nil))
(23 x 10 ((Island :? :? :?pol :? "ASTERN" :? :?tit) nil nil) "as:WhatIsAstern" 10 (:?pol :?tit :?acc) #object[clojure.core$eval16826$fn__16827 0x6a14e298 "clojure.core$eval16826$fn__16827@6a14e298"])
(24 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortAbaft")
(25 i 11 ((Question :? :? :? :? :? "what-is" :? "abaft the port beam" :? :?) nil nil))
(26 x 12 ((Island :? :? :?pol :? "PORT-ABAFT" :? :?tit) nil nil) "as:WhatIsPortAbaft" 10 (:?pol :?tit :?acc) #object[clojure.core$eval16830$fn__16831 0x2c4adc53 "clojure.core$eval16830$fn__16831@2c4adc53"])
(27 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBeam")
(28 i 13 ((Question :? :? :? :? :? "what-is" :? "on the port beam" :? :?) nil nil))
(29 x 14 ((Island :? :? :?pol :? "PORT-BEAM" :? :?tit) nil nil) "as:WhatIsPortBeam" 10 (:?pol :?tit :?acc) #object[clojure.core$eval16834$fn__16835 0x71cdfcdd "clojure.core$eval16834$fn__16835@71cdfcdd"])
(30 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsPortBow")
(31 i 15 ((Question :? :? :? :? :? "what-is" :? "on the port bow" :? :?) nil nil))
(32 x 16 ((Island :? :? :?pol :? "PORT-BOW" :? :?tit) nil nil) "as:WhatIsPortBow" 10 (:?pol :?tit :?acc) #object[clojure.core$eval16838$fn__16839 0x5b13237b "clojure.core$eval16838$fn__16839@5b13237b"])
(33 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarAbaft")
(34 i 17 ((Question :? :? :? :? :? "what-is" :? "abaft the starboard beam" :? :?) nil nil))
(35 x 18 ((Island :? :? :?pol :? "STAR-ABAFT" :? :?tit) nil nil) "as:WhatIsStarAbaft" 10 (:?pol :?tit :?acc) #object[clojure.core$eval16842$fn__16843 0x789250d "clojure.core$eval16842$fn__16843@789250d"])
(36 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBeam")
(37 i 19 ((Question :? :? :? :? :? "what-is" :? "on the starboard beam" :? :?) nil nil))
(38 x 20 ((Island :? :? :?pol :? "STAR-BEAM" :? :?tit) nil nil) "as:WhatIsStarBeam" 10 (:?pol :?tit :?acc) #object[clojure.core$eval16846$fn__16847 0x212f4897 "clojure.core$eval16846$fn__16847@212f4897"])
(39 e 6 ((Answer :? :?acc :?) nil nil) "as:WhatIsStarBow")
(40 i 21 ((Question :? :? :? :? :? "what-is" :? "on the starboard bow" :? :?) nil nil))
(41 x 22 ((Island :? :? :?pol :? "STAR-BOW" :? :?tit) nil nil) "as:WhatIsStarBow" 10 (:?pol :?tit :?acc) #object[clojure.core$eval16850$fn__16851 0x3e5be215 "clojure.core$eval16850$fn__16851@3e5be215"])
(42 e 6 ((Answer :? :?acc :?) nil nil) "as:NearbyIslands")
(43 i 23 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil))
(44 x 0 ((Island :? :? :? :? :? :? :?tit) nil nil) "as:NearbyIslands" 10 (:?tit :?acc) #object[clojure.core$eval16854$fn__16855 0x3eb47d87 "clojure.core$eval16854$fn__16855@3eb47d87"])
(45 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBehind")
(46 i 24 ((Question :? :? :? :?tit1 :? "what-is" :? "behind the island" :? :?) nil nil))
(47 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(48 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval16858$fn__16859 0x5567dab1 "clojure.core$eval16858$fn__16859@5567dab1"]) "as:IslandsBehind" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval16862$fn__16863 0x54c679ed "clojure.core$eval16862$fn__16863@54c679ed"])
(49 e 6 ((Answer :? :?acc :?) nil nil) "as:IslandsBefore")
(50 i 25 ((Question :? :? :? :?tit1 :? "what-is" :? "before the island" :? :?) nil nil))
(51 i 0 ((Island :? :? :?pol1 :?sec :? :? :?tit1) nil nil))
(52 x 0 ((Island :? :? :?pol2 :?sec :? :? :?tit2) (:?pol1 :?pol2) #object[clojure.core$eval16866$fn__16867 0x585584df "clojure.core$eval16866$fn__16867@585584df"]) "as:IslandsBefore" 10 (:?tit2 :?acc :?pol2) #object[clojure.core$eval16870$fn__16871 0x5b819147 "clojure.core$eval16870$fn__16871@5b819147"])
(53 e 1 ((OSMData :? :? :?rad :? :?) nil nil) "as:WhereIsIsland")
(54 i 26 ((Question :? :? :? :?tit :? "where-is" :? "island" :? :?) nil nil))
(55 x 0 ((Island :? :?crd :?pol :?sec :?sid :? :?tit) nil nil) "as:WhereIsIsland" 10 (:?sid :?pol :?tit :?crd :?rad :?fids) #object[clojure.core$eval16874$fn__16875 0x4c1d14af "clojure.core$eval16874$fn__16875@4c1d14af"])
(56 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsOnSide")
(57 x 27 ((Question :? :? :? :? :? "what-is" :? :?sub :? :?) (:?sub) #object[clojure.core$eval16881$fn__16882 0x6174af2b "clojure.core$eval16881$fn__16882@6174af2b"]) "as:AnswerIslandsOnSide" 9 (:?acc :?sub :?fids) #object[clojure.core$eval16885$fn__16886 0x52971f74 "clojure.core$eval16885$fn__16886@52971f74"])
(58 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerNearbyIslands")
(59 x 23 ((Question :? :? :? :? :? "nearby-islands" :? :? :? :?) nil nil) "as:AnswerNearbyIslands" 9 (:?acc :?fids) #object[clojure.core$eval16889$fn__16890 0x6313a992 "clojure.core$eval16889$fn__16890@6313a992"])
(60 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBehind")
(61 x 24 ((Question :? :? :? :?tit :? "what-is" :? "behind the island" :? :?) nil nil) "as:AnswerIslandsBehind" 9 (:?tit :?acc :?fids) #object[clojure.core$eval16893$fn__16894 0x1f689671 "clojure.core$eval16893$fn__16894@1f689671"])
(62 e 6 ((Answer :? :?acc :?) nil nil) "as:AnswerIslandsBefore")
(63 x 25 ((Question :? :? :? :?tit :? "what-is" :? "before the island" :? :?) nil nil) "as:AnswerIslandsBefore" 9 (:?tit :?acc :?fids) #object[clojure.core$eval16897$fn__16898 0x23365cde "clojure.core$eval16897$fn__16898@23365cde"])
