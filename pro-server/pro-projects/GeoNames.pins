; Tue Jul 05 15:57:07 MSK 2016
; 
;+ (version "3.5")
;+ (build "Build 663")

([Example_Class10000] of  CloProgram

	(cloFunctions
		[Example_Class20050]
		[GeoNames_Class11]
		[GeoNames_Class28]
		[GeoNames_Class10006]
		[Example_Class30000]
		[Example_Class40007]
		[Example_Class10003]
		[Example_Class20000]
		[Example_Class20005]
		[Example_Class20021]
		[GeoNames_Class60030]
		[GeoNames_Class1]
		[GeoNames_Class10001]
		[GeoNames_Class50001]
		[GeoNames_Class7]
		[GeoNames_Class25]
		[GeoNames_Class30]
		[GeoNames_Class40000]
		[GeoNames_Class80001]
		[GeoNames_Class40001]
		[GeoNames_Class20028]
		[GeoNames_Class30001]
		[GeoNames_Class40023]
		[GeoNames_Class20000]
		[GeoNames_Class30006]
		[GeoNames_Class30010]
		[GeoNames_Class50002])
	(cloNamespace [Example_Class10001])
	(cloVars
		[Example_Class10002]
		[Example_Class20001]
		[Example_Class20002]
		[Example_Class20020]
		[GeoNames_Class60031]
		[GeoNames_Class2]
		[GeoNames_Class4]
		[GeoNames_Class3]
		[GeoNames_Class0]
		[GeoNames_Class10000]
		[GeoNames_Class20027]
		[GeoNames_Class30000]
		[GeoNames_Class20004]
		[GeoNames_Class70001]
		[GeoNames_Class50000])
	(title "geonames"))

([Example_Class10001] of  CloNamespace

	(source "(:use \n  protege.core\n  clojure.xml)\n(:import java.net.URL)\n(:gen-class :load-impl-ns false)")
	(title "geo.names"))

([Example_Class10002] of  CloVar

	(source "\"http://api.geonames.org/ocean\"")
	(title "^:dynamic *ocean-url*"))

([Example_Class10003] of  CloFunction

	(source "; Get ocean from Geonames Web Service\n(let [url (str *ocean-url* \"?lat=\" lat \"&lng=\" lng)]\n (try\n  (if-let [xml (clojure.xml/parse url)]\n    (if-let [mes (:message (:attrs (first (:content xml))))]\n       \"Land\"\n       (first (:content (first (:content (first (:content xml)))))) ))\n  (catch Exception e\n   (ctpl e)\n   ())))")
	(title "call-geonames-ocean [lat lng]"))

([Example_Class20000] of  CloFunction

	(source "; Get country code from Geonames Web Service\n(let [url (str *country-code-url* \"?type=xml&lat=\" lat \"&lng=\" lng \"&username=\" *username*)]\n (try\n  (if-let [xml (clojure.xml/parse url)]\n    (if-let [mes (:message (:attrs (first (:content xml))))]\n       \"Not a country\"\n       (first (:content (first (:content (first (:content xml)))))) ))\n  (catch Exception e\n   (ctpl e)\n   ())))")
	(title "call-geonames-country-code [lat lng]"))

([Example_Class20001] of  CloVar

	(source "\"http://api.geonames.org/countryCodeXML\"")
	(title "^:dynamic *country-code-url*"))

([Example_Class20002] of  CloVar

	(source "\"http://ws.geonames.org/countryInfo\"")
	(title "^:dynamic *country-info-url*"))

([Example_Class20005] of  CloFunction

	(source "; Get country info from Geonames Web Service\n(let [url (str *country-info-url* \"?lang=\" lang \"&country=\" code \"&username=\" *username*)]\n (try\n  (if-let [xml (clojure.xml/parse url)]\n    (xml-to-map (first (:content xml))) )\n  (catch Exception e\n   (ctpl e)\n   ())))")
	(title "call-geonames-country-info [code lang]"))

([Example_Class20020] of  CloVar

	(source "\"http://api.geonames.org/findNearby\"")
	(title "^:dynamic *nearby-url*"))

([Example_Class20021] of  CloFunction

	(source "; Get near by place from Geonames Web Service\n(let [url (str *nearby-url* \"?lat=\" lat \"&lng=\" lng \"&username=\" *username* \"&style=full\")]\n (try\n   (if-let [xml (clojure.xml/parse url)]\n      (xml-to-map (first (:content xml))) )\n (catch Exception e\n   (ctpl e)\n   nil)))")
	(title "call-geonames-nearby [lat lng]"))

([Example_Class20050] of  CloFunction

	(source "(doseq [[k v] mp]\n   (if (slt k)\n       (ssv inst k v)))\ninst")
	(title "map-into-inst [mp inst]"))

([Example_Class30000] of  CloFunction

	(source "(let [phi1 (Math/toRadians lat1)\n       lam1 (Math/toRadians lon1)\n       phi2 (Math/toRadians lat2)\n       lam2 (Math/toRadians lon2)\n       ldiff (- lam2 lam1)\n       cosp2 (Math/cos phi2)\n       cosin (* (Math/cos phi1)(Math/sin phi2))\n       sicos (* (Math/sin phi1) cosp2 (Math/cos ldiff))\n       diff2 (- cosin sicos)\n       cosil (* cosp2 (Math/sin ldiff))\n       azrad (Math/atan2 cosil diff2)\n       azdeg (Math/toDegrees azrad)]\n  (cond\n    (< azdeg 0)(+ azdeg 360)\n    (> azdeg 360)(- azdeg 360)\n    true  azdeg))")
	(title "bearing [lat1 lon1 lat2 lon2]"))

([Example_Class40007] of  CloFunction

	(source "(condp > bear\n    22.5 \"north\"\n    67.5 \"north-east\"\n  112.5 \"east\"\n  157.5 \"south-east\"\n  202.5 \"south\"\n  247.5 \"south-west\"\n  292.5 \"west\"\n  337.5 \"north-west\"\n  \"north\")")
	(title "direction [bear]"))

([GeoNames_Class0] of  CloVar

	(source "\"http://api.geonames.org/rssToGeoRSS\"")
	(title "^:dynamic *rss-georss*"))

([GeoNames_Class1] of  CloFunction

	(source "; Get GeoRSS for RSS feed <item>s from Geonames Web Service\n(let [url (str *rss-georss* \"?feedUrl=\" feed \"&username=\" *username*)]\n  (seq (rss-item-map-list url)))")
	(title "call-geonames-rss [feed]"))

([GeoNames_Class10000] of  CloVar

	(source "\"http://api.geonames.org/astergdemXML\"")
	(title "^:dynamic *elev30-url*"))

([GeoNames_Class10001] of  CloFunction

	(source ";; Get elevation (step 30m) from Geonames Web Service\n;; Arguments can be vectors (length <= 20 on free server)\n(let [url (if (vector? lat)\n	(let [lats (apply str (interpose \",\" lat))\n	       lngs (apply str (interpose \",\" lng))]\n	   (str *elev30-url* \"?lats=\" lats \"&lngs=\" lngs))\n	(str *elev30-url* \"?lat=\" lat \"&lng=\" lng))\n       url (str url \"&type=XML&username=\" *username*)]\n (try\n  (if-let [xml (clojure.xml/parse url)]\n    (if (vector? lat)\n        (map #(first (:content %)) (filter #(some #{:astergdem} (vals %)) (:content xml)))\n        (first (:content (first (:content xml)) )) ))\n  (catch Exception e\n   (ctpl e)\n   ())))")
	(title "call-geonames-elev30 [lat lng]"))

([GeoNames_Class10006] of  CloFunction

	(source "; Get list of maps from url returning collection of entries\n(try\n  (if-let [xml (parse url)]\n    (if-let [tags (:content (first (:content xml)))]\n       (if-let [items (seq (filter #(= (:tag %) :item) tags))]\n           (filter #(not (empty? %)) (map xml-to-map items)))\n       (do (println [\"rss-item-map-list:\" xml]) nil)))\n  (catch Exception e\n    (ctpl e)\n    ()))")
	(title "rss-item-map-list [url]"))

([GeoNames_Class11] of  CloFunction

	(source "(let [cnt (:content xml)\n       keys (map #(name (:tag %)) cnt)\n       vals (map #(first (:content %)) cnt)]\n  (apply hash-map (interleave keys vals)))")
	(title "xml-to-map [xml]"))

([GeoNames_Class2] of  CloVar

	(source "\"http://api.geonames.org/wikipediaBoundingBox\"")
	(title "^:dynamic *wiki-bbx*"))

([GeoNames_Class20000] of  CloFunction

	(source ";; Return geonameId of gn:Feature\n(if (= (:tag fea) :gn:Feature)\n    (let [rab (:rdf:about (:attrs fea))\n           lst (seq (.split rab \"/\"))]\n       (last lst)))")
	(title "gn:Feature-gid [fea]"))

([GeoNames_Class20004] of  CloVar

	(source "\"liikalanjoki\"")
	(title "^:dynamic *username*"))

([GeoNames_Class20027] of  CloVar

	(source "\"http://api.geonames.org/findNearbyPOIsOSM\"")
	(title "^:dynamic *nearby-pois-osm*"))

([GeoNames_Class20028] of  CloFunction

	(source ";; Get nearby places of interest in OSM data from Geonames Web Service\n;; Return list of maps\n(let [url (str *nearby-pois-osm* \"?lat=\" lat \"&lng=\" lng \"&username=\" *username*)]\n (ctpl url)\n (try\n   (if-let [xml (clojure.xml/parse url)]\n      (let [lst (map :content (:content xml))]\n               (map tag-con-map lst)))\n (catch Exception e\n   (ctpl e)\n   nil)))")
	(title "gn-pois-osm [lat lng]"))

([GeoNames_Class25] of  CloFunction

	(source "; Get Wikipedia articles for given bounding box\n(let [url (str *wiki-bbx* \"?north=\" north \"&south=\" south \"&west=\" west \"&east=\" east \"&lang=\" lang \"&maxRows=\" max \"&username=\" *username*)]\n  (seq (ws-map-list url)))")
	(title "call-wiki-bbx [north west south east max lang]"))

([GeoNames_Class28] of  CloFunction

	(source "; Get list of maps from url returning collection of entries\n(try\n  (if-let [xml (parse url)]\n    (if-let [all (:content xml)]\n       (filter #(not (empty? %)) (map xml-to-map all)) ))\n  (catch Exception e\n    (ctpl e)\n    ()))")
	(title "ws-map-list [url]"))

([GeoNames_Class3] of  CloVar

	(source "\"http://api.geonames.org/wikipediaSearch\"")
	(title "^:dynamic *wiki-search*"))

([GeoNames_Class30] of  CloFunction

	(source "; Get Wikipedia articles near some point\n(let [url (str *wiki-nearby* \"?lat=\" lat \"&lng=\" lon \"&radius=\" radius-km \"&maxRows=\" max \"&username=\" *username*)]\n  (seq (ws-map-list url)))")
	(title "call-wiki-nearby [lat lon radius-km max lang]"))

([GeoNames_Class30000] of  CloVar

	(source "\"http://api.geonames.org/findNearByWeather\"")
	(title "^:dynamic *weather-url*"))

([GeoNames_Class30001] of  CloFunction

	(source ";; Return geoname attributes map by geonameId\n(try\n  (let [url (str \"http://api.geonames.org/get?geonameId=\" gid \"&username=\" *username*)\n              xml (clojure.xml/parse url)]\n          (if xml\n             (tag-con-map (:content xml))))\n(catch Exception e\n  (ctpl e)\n  nil))")
	(title "gn-get [gid]"))

([GeoNames_Class30006] of  CloFunction

	(source ";; Return geonameId-s of gn:Feature gn:nearbyFeatures\n(if (= (:tag fea) :gn:Feature)\n    (let [rab (filter #(= (:tag %) :gn:nearbyFeatures) (:content fea))]\n       (if (seq rab)\n           (let [res (:rdf:resource (:attrs (first rab)))\n                  xml (clojure.xml/parse res)]\n               (if (map? xml)\n                   (map gn:Feature-gid (:content xml)) ))) ))")
	(title "gn:Feature-neighbor-gids [fea]"))

([GeoNames_Class30010] of  CloFunction

	(source ";; Return neighbor gids in bbx=[w e s n] as set\n(let [gsb (gn-search-bbx-rdf \"\" 10 w e s n)]\n  (if (seq gsb)\n      (set (mapcat gn:Feature-neighbor-gids gsb)) ))")
	(title "gn-neighbor-gids [w e s n]"))

([GeoNames_Class4] of  CloVar

	(source "\"http://api.geonames.org/findNearbyWikipedia\"")
	(title "^:dynamic *wiki-nearby*"))

([GeoNames_Class40000] of  CloFunction

	(source ";: Get Elevation - Aster Global Digital Elevation Model V1 2009\n;: Returns map {coord1 elev1coord2 elev2 ..} \n(let [crds (take 20 coords)\n       lats (map first crds)\n       lngs (map second crds)\n       lats (apply str (interpose \",\" lats))\n       lngs (apply str (interpose \",\" lngs))\n       url (str *strm3-url* \"?lats=\" lats \"&lngs=\" lngs \"&username=\" *username*)]\n (try\n  (if-let [dat (slurp url)]\n    (let [v (read-string (str \"[\" dat \"]\"))\n           v (interleave coords v)]\n      (apply hash-map v)))\n  (catch Exception e\n   (ctpl e)\n   nil)))")
	(title "call-geonames-20elevations [coords]"))

([GeoNames_Class40001] of  CloFunction

	(source "(letfn [(tac? [x] (let [cnt (:content x)]\n	(not (or (nil? (:tag x)) (not (or (nil? cnt) (seq cnt))) ) )))\n           (every-tac? [y] (every? #(tac? %) y))]\n   (cond\n      (nil? lst) lst\n      (every-tac? lst) (reduce #(assoc %1 (:tag %2) (tag-con-map (:content %2))) {} lst)\n      (> (count lst) 1) lst\n      true (first lst)))")
	(title "tag-con-map [lst]"))

([GeoNames_Class40023] of  CloFunction

	(source ";; For q=\"\" and specified bbx return list of gn:Feature-s as rdf standard xml map\n(let [url (str \"http://api.geonames.org/search?q=\" q \"&maxRows=\" lim \"&type=rdf&username=\" *username* \"&south=\" s \"&east=\" e \"&north=\" n \"&west=\" w)]\n (try\n   (if-let [xml (clojure.xml/parse url)]\n      (:content xml))\n (catch Exception e\n   (ctpl e)\n   nil)))")
	(title "gn-search-bbx-rdf [q lim w e s n]"))

([GeoNames_Class50000] of  CloVar

	(source "\"http://api.geonames.org/gtopo30\"")
	(title "^:dynamic *gtopo30*"))

([GeoNames_Class50001] of  CloFunction

	(source "; Get near by weather from Geonames Web Service\n(let [url (str *weather-url* \"?lat=\" lat \"&lng=\" lng \"&style=full&username=\"  *username*)]\n (try\n   (if-let [xml (clojure.xml/parse url)]\n      (xml-to-map (first (:content xml))) )\n (catch Exception e\n   (ctpl e)\n   nil)))")
	(title "call-geonames-weather [lat lng]"))

([GeoNames_Class50002] of  CloFunction

	(source ";; Get Wikipedia articles of title\n(let [url (str *wiki-search* \"?title=\" (java.net.URLEncoder/encode title \"utf-8\") \"&lang=\" lang \"&maxRows=\" max)]\n  (seq (ws-map-list url)))")
	(title "gn-wiki-title [title max lang]"))

([GeoNames_Class60001] of  CloFunction

	(source "(java.io.ByteArrayInputStream.  (.getBytes s java.nio.charset.StandardCharsets/UTF_8))")
	(title "istream [s]"))

([GeoNames_Class60030] of  CloFunction

	(source "; Get  the most detailed information available for the lat/lng from Geonames Web Service\n(let [url (str *ext-nearby-url* \"?lat=\" lat \"&lng=\" lng \"&username=\" *username*)]\n (try\n   (if-let [xml (clojure.xml/parse url)]\n      (map xml-to-map (:content xml)) )\n (catch Exception e\n   (ctpl e)\n   nil)))")
	(title "call-geonames-nearby-ext [lat lng]"))

([GeoNames_Class60031] of  CloVar

	(source "\"http://api.geonames.org/extendedFindNearby\"")
	(title "^:dynamic *ext-nearby-url*"))

([GeoNames_Class7] of  CloFunction

	(source "; Get Wikipedia articles containing text\n(let [url (str *wiki-search* \"?q=\" (java.net.URLEncoder/encode text \"utf-8\") \"&lang=\" lang \"&maxRows=\" max \"&username=\" *username*)]\n  (seq (ws-map-list url)))")
	(title "call-wiki-search [text max lang]"))

([GeoNames_Class70001] of  CloVar

	(source "\"http://api.geonames.org/srtm3\"")
	(title "^:dynamic *strm3-url*"))

([GeoNames_Class80001] of  CloFunction

	(source "; Get Elevation - GTOPO30\n(let [url (str *gtopo30* \"?lat=\" lat \"&lng=\" lng \"&username=\"  *username*)]\n (try\n   (if-let [gtp (slurp url)]\n     (read-string gtp))\n (catch Exception e\n   (ctpl e)\n   nil)))")
	(title "call-geonames-gtopo30 [lat lng]"))
