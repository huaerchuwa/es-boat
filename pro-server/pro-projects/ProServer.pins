; Sun Apr 10 22:03:35 MSK 2016
; 
;+ (version "3.5")
;+ (build "Build 663")

([ProServer_Class0] of  CloProgram

	(cloFunctions [ProServer_Class2])
	(cloNamespace [ProServer_Class1])
	(title "Clojure Work"))

([ProServer_Class1] of  CloNamespace

	(source "(:use protege.core)\n(:import clojuretab.ClojureTab)")
	(title "menu.item"))

([ProServer_Class10000] of  CloProgram

	(cloFunctions
		[ProServer_Class10011]
		[ProServer_Class10010]
		[ProServer_Class10012]
		[ProServer_Class50000]
		[ProServer_Class60003]
		[ProServer_Class50003]
		[ProServer_Class50004]
		[ProServer_Class60000]
		[ProServer_Class60001]
		[ProServer_Class20002]
		[ProServer_Class20000]
		[ProServer_Class20001])
	(cloNamespace [ProServer_Class10001])
	(cloVars
		[ProServer_Class10003]
		[ProServer_Class10004]
		[ProServer_Class10005]
		[ProServer_Class10006]
		[ProServer_Class10007]
		[ProServer_Class10008]
		[ProServer_Class10009]
		[ProServer_Class50002]
		[ProServer_Class70008]
		[ProServer_Class70009])
	(documentation [ProServer_Class10002])
	(title "Boat Movement"))

([ProServer_Class100000] of  CloFunction

	(source "(println [:PARAMS params])\n(if-let [trt (:throttle params)]\n  (bm/boat-engine ONBOARD (read-string trt))\n  (if-let [cmd (:helm params)]\n    (bm/boat-helm ONBOARD (keyword cmd))))\n\"\"")
	(title "command [params]"))

([ProServer_Class100001] of  CloVar

	(source "\"b1\"")
	(title "ONBOARD"))

([ProServer_Class10001] of  CloNamespace

	(source "(:require\n  [geo.calc :as geo]\n  [async.proc :as ap])")
	(title "boat.mov"))

([ProServer_Class100011] of  CloFunction

	(source "(.getTimeInMillis (Calendar/getInstance))")
	(title "current-time []"))

([ProServer_Class10002] of  CloDocumentation

	(source "All boats data:\n\nBOATS - { id1 <boat_data1> ... }\n\nBoat data:\n\n{:coord [lat<lat-degrees-float> lon <lon-degrees-float>] \n :course <crs-degrees-int> \n :speed <spd-knots-int>\n :helm <:steady/:port/:hard-a-port/:starboard/:hard-a-starboard>\n :engine <target speed-knots-int (negative = reverse)>\n :time-from-turn <msec> \n :turn-coord [lat lon]}}\n\nBoat constants:\n\nCRS-STP - step of normal course update\nCRS-HRD - step of hard course update\n\nSPD-STP - step of speed update\nSPD-MAX - max speed (positive)\nSPD-MIN - min speed (negative)\n\nBOAT-TIO - timeout interval of boat data update\n\nAPI:\n\nstart-boats-movement [f] ;; (f <boat_data>)- func of sending mees when\n                                          ;; speed or course changing\n(boat-add id coord crs spd f) ;; or boat adding\n(boat-rem id f)                       ;;  or removing\n(boat-helm id cmd) ;; cmd=<:steady/:starboard/:hard-starboard/:port/:hard-port>\n(boat-engine id knots) ;; knots-int\n(coord id)\n(speed id)\n(course id)"))

([ProServer_Class10003] of  CloVar

	(source "(defonce BOATS (volatile! {}))")
	(title "DEF-BOATS"))

([ProServer_Class10004] of  CloVar

	(source "6")
	(title "CRS-STP"))

([ProServer_Class10005] of  CloVar

	(source "18")
	(title "CRS-HRD"))

([ProServer_Class10006] of  CloVar

	(source "0.6")
	(title "SPD-STP"))

([ProServer_Class10007] of  CloVar

	(source "44")
	(title "SPD-MAX"))

([ProServer_Class10008] of  CloVar

	(source "-8")
	(title "SPD-MIN"))

([ProServer_Class10009] of  CloVar

	(source "1000")
	(title "BOAT-TIO"))

([ProServer_Class10010] of  CloFunction

	(source "(let [cp (fn [crs] (if (>= crs 360) (- crs 360) crs))\n       cm (fn [crs] (if (< crs 0) (+ crs 360) crs))\n       old (:course bdt)\n       tgt (:helm bdt)]\n  (if (not= tgt :steady)\n    (let [nbd (assoc bdt \n                    :course (condp = tgt\n                                  :starboard (cp (+ old CRS-STP))\n                                  :hard-a-starboard (cp (+ old CRS-HRD))\n                                  :port (cm (- old CRS-STP))\n                                  :hard-a-port (cm (- old CRS-HRD))\n                                  bdt)\n                    :time-from-turn 0\n                    :turn-coord (:coord bdt))]\n      (f nbd)\n      nbd)\n    bdt))")
	(title "helm [bdt f]"))

([ProServer_Class10011] of  CloFunction

	(source "(let [old (:speed bdt)\n       tgt (:engine bdt)\n       new (cond\n                (> tgt old) (+ old SPD-STP)\n                (< tgt old) (- old SPD-STP)\n                true 0)]\n  (if (= new 0)\n    bdt\n    (let [nbd (assoc bdt \n                    :speed (if (or (and (< old tgt) (>= new tgt))\n                                         (and (> old tgt) (<= new tgt)))\n                                 tgt\n                                 new)\n                    :time-from-turn 0\n                    :turn-coord (:coord bdt))]\n      (f nbd)\n      nbd)))")
	(title "engine [bdt f]"))

([ProServer_Class10012] of  CloFunction

	(source "(let [etim (+ (:time-from-turn bdt) BOAT-TIO)\n       ehrs (/ etim 36000000)]\n  (assoc bdt :coord (geo/future-pos (:turn-coord bdt) (:course bdt) (:speed bdt) ehrs)\n                    :time-from-turn etim))")
	(title "move [bdt]"))

([ProServer_Class110000] of  CloVar

	(source "[62.2935 5.4987]")
	(title "MAP-CENTER"))

([ProServer_Class120000] of  CloProgram

	(cloFunctions
		[ProServer_Class120003]
		[ProServer_Class120004]
		[ProServer_Class120005]
		[ProServer_Class120006]
		[ProServer_Class120007]
		[ProServer_Class120008]
		[ProServer_Class120010]
		[ProServer_Class120011]
		[ProServer_Class120012]
		[ProServer_Class120014]
		[ProServer_Class120015]
		[ProServer_Class120016]
		[ProServer_Class130001]
		[ProServer_Class130002]
		[ProServer_Class130003])
	(cloNamespace [ProServer_Class120001])
	(cloVars
		[ProServer_Class120002]
		[ProServer_Class120009]
		[ProServer_Class120013]
		[ProServer_Class130000])
	(title "Cesium Server"))

([ProServer_Class120001] of  CloNamespace

	(source "(:require\n    [ring.adapter.jetty :as jetty]\n    [ring.util.response :as r]\n    [compojure.core :refer [defroutes routes GET]]\n    [compojure.handler :as handler]\n    [compojure.route :as route]\n    [clojure.core.async :as async :refer [chan put! alts!!]]\n    [boat.mov :as bm]\n    [async.proc :as ap])\n(:import java.util.Calendar)")
	(title "cesium.core"))

([ProServer_Class120002] of  CloVar

	(source "(defonce CAM (volatile! {:onboard nil\n                         :id nil\n                         :heading \"FORWARD\"\n                         :pitch -10.0\n                         :roll 0.0\n                         :chan nil}))")
	(title "DEF-CAM"))

([ProServer_Class120003] of  CloFunction

	(source "(if-let [ch (:chan @CAM)]\n    (async/put! ch [typ (.trim dat)]))")
	(title "send-event [typ dat]"))

([ProServer_Class120004] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n    (if (= bit :none)\n      bits\n      (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out-events [chn]"))

([ProServer_Class120005] of  CloFunction

	(source "(if-let [ch (:chan @CAM)]\n    (let [evt-hr (fn [[typ dat]]\n                   (str \"event: \" typ \"\\ndata: \" dat \"\\n\\n\"))\n          ee (deref (future (pump-out-events ch)))\n          resp (if (seq ee)\n                 (apply str (map evt-hr ee))\n                 \"\")]\n      (->\n        (r/response resp)\n        (r/header \"Access-Control-Allow-Origin\" \"*\")\n        (r/header \"Content-Type\" \"text/event-stream;charset=utf-8\"))))")
	(title "events []"))

([ProServer_Class120006] of  CloFunction

	(source "(when (nil? (:chan @CAM))\n    (vswap! CAM assoc :chan (async/chan))\n    (println (str \"SSE Server started on channel: \" (:chan @CAM))))")
	(title "start-sse-server []"))

([ProServer_Class120007] of  CloFunction

	(source "(when (:chan @CAM)\n    (vswap! CAM dissoc :chan)\n    (println \"SSE Server stopped.\"))")
	(title "stop-sse-server []"))

([ProServer_Class120008] of  CloFunction

	(source "(let [p (str \"{\\\"ctrl\\\":\\\"\"\n               ctrl \"\\\",\\\"lat\\\":\"\n               lat \",\\\"lon\\\":\"\n               lon \",\\\"altitude\\\":\"\n               alt \",\\\"heading\\\":\"\n               hea \",\\\"pitch\\\":\"\n               pit \",\\\"roll\\\":\"\n               rol \",\\\"duration\\\":\"\n               per \"}\")]\n    (send-event \"fly\" p))")
	(title "fly-control [ctrl lat lon alt hea pit rol per]"))

([ProServer_Class120009] of  CloVar

	(source "(volatile! 0)")
	(title "OLD-CRS"))

([ProServer_Class120010] of  CloFunction

	(source "(if (> on-course crs)\n    (if (< (- on-course crs) 180)\n      :right\n      :left)\n    (if (< (- crs on-course) 180)\n      :left\n      :right))")
	(title "what-side [crs on-course]"))

([ProServer_Class120011] of  CloFunction

	(source "(let [pitch (:pitch @CAM)\n        roll (:roll @CAM)\n        direct (fn [x] (cond\n                         (> x 360) (- x 360)\n                         (< x 0) (+ x 360)\n                         true x))\n        head (condp = (:heading @CAM)\n               \"FORWARD\" (direct crs)\n               \"BACKWARD\" (direct (+ crs 180))\n               \"RIGHT\" (direct (+ crs 90))\n               \"LEFT\" (direct (- crs 90))\n               \"UP\" (direct crs)\n               \"DOWN\" (direct crs))\n        dif (- crs @OLD-CRS)]\n    (vreset! OLD-CRS crs)\n    (fly-control \"fly\" lat lon alt head pitch roll per))")
	(title "fly-to [lat lon alt crs per]"))

([ProServer_Class120012] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601curt []"))

([ProServer_Class120013] of  CloVar

	(source "(volatile! true)")
	(title "DOC-SND"))

([ProServer_Class120014] of  CloFunction

	(source "\"{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"}\"")
	(title "doc []"))

([ProServer_Class120015] of  CloFunction

	(source "(when @DOC-SND\n    (send-event \"czml\" (doc))\n    (vreset! DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"label\\\":{\\\"scale\\\":0.25,\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -8]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\"\n               lon\n               \", \"\n               lat\n               \", \"\n               alt\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "location [label img-url lat lon alt]"))

([ProServer_Class120016] of  CloFunction

	(source "(when @DOC-SND\n    (send-event \"czml\" (doc))\n    (vreset! DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\"\n               (/ scale 2)\n               \",\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -8]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\\\"\"\n               tim1\n               \"\\\", \"\n               lon1\n               \", \"\n               lat1\n               \", \"\n               alt1\n               \",\\\"\"\n               tim2\n               \"\\\", \"\n               lon2\n               \", \"\n               lat2\n               \", \"\n               alt2\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "leg [label img-url scale [lat1 lon1 alt1 tim1] [lat2 lon2 alt2 tim2]]"))

([ProServer_Class130000] of  CloVar

	(source "20000")
	(title "CZMW-INTL"))

([ProServer_Class130001] of  CloFunction

	(source "(let [id (:id @CAM)]\n    (let [[lat lon] (bm/coord id)\n           alt 40 ;; feets\n           crs (bm/course id)\n           per (/ CZMW-INTL 1000)] ;; msec to sec\n      (fly-to lat lon alt crs per)))")
	(title "cesium-work []"))

([ProServer_Class130002] of  CloFunction

	(source "(when (nil? (:id @CAM))\n    (ap/repeater #(cesium-work) CZMW-INTL \"Start (cesium-work)..\")\n    (vswap! CAM assoc :id 0))\n(start-sse-server)")
	(title "start-cesium []"))

([ProServer_Class130003] of  CloFunction

	(source "(println [:CAMERA params])\n  (vswap! CAM merge params)\n  (condp = (params :camera)\n    \"on\" (start-cesium)\n    \"off\"(stop-sse-server)\n    true)\n  (condp = (params :heading)\n    \"UP\" (vswap! CAM assoc :pitch 90.0)\n    \"DOWN\" (vswap! CAM assoc :pitch -90.0)\n    nil true\n    (vswap! CAM assoc :pitch 0.0))\n  \"\"")
	(title "camera [params]"))

([ProServer_Class140000] of  CloFuncall

	(source "(some? {})"))

([ProServer_Class140001] of  CloFuncall

	(source "(empty? {})"))

([ProServer_Class140002] of  CloFunction

	(source "(println [:QUESTIONS params])\n(let [ans (condp = (:question params)\n               \"nearby-islands\" [\"Oz\" \"Kron\" \"Burnev\" \"Mukisaari\" \"Selkamarjansaari\"]\n               \"what-behind\" (str \"Behind \" (:island params) \" nothing interesting!\")\n               \"\")]\n  (-> (r/response (write-transit ans))\n        (r/header \"Access-Control-Allow-Origin\" \"*\")))")
	(title "questions [params]"))

([ProServer_Class150000] of  CloFuncall

	(source "pro.server/APP"))

([ProServer_Class150001] of  CloFuncall

	(source "(in-ns 'pro.server)"))

([ProServer_Class150002] of  CloFuncall

	(source "APP"))

([ProServer_Class150003] of  CloFuncall

	(source "(def APP nil)"))

([ProServer_Class150004] of  CloFuncall

	(source "(start-server)"))

([ProServer_Class150005] of  CloFuncall

	(source "(stop-server)"))

([ProServer_Class2] of  CloFunction

	(source "(println \"INITIALIZING EXPERT SYSTEM\")\n(println \"1.Loading Clojure Programs...\")\n(if-let [wps (seq (cls-instances \"WorkingPrograms\"))]\n  (loop [i 1 pins (svs (first wps) \"cloPrograms\")]\n    (when (seq pins)\n      (println (str \" 1.\" i \" \" (sv (first pins) \"title\") \" = \" (ClojureTab/loadProgram (first pins)) ))\n      (recur (inc i) (rest pins))))\n  (println \"  Instance of WorkingPrograms not found!\"))\n(println \"2. Starting server...\")\n(eval (read-string \"(pro.server/start-server)\"))\n(println (str \"    Map center: \" (eval (read-string \"pro.server/MAP-CENTER\"))))\n(println \"EXPERT SYSTEM INITIALIZED\")")
	(title "clojure-work []"))

([ProServer_Class20000] of  CloFunction

	(source "(get-in @BOATS [id :speed])")
	(title "speed [id]"))

([ProServer_Class20001] of  CloFunction

	(source "(get-in @BOATS [id :course])")
	(title "course [id]"))

([ProServer_Class20002] of  CloFunction

	(source "(get-in @BOATS [id :coord])")
	(title "coord [id]"))

([ProServer_Class3] of  WorkingPrograms

	(cloPrograms
		[Clojure_Class10000]
		[RuleEngine_Class30000]
		[ProServer_Class30001]
		[ProServer_Class40001]
		[ProServer_Class10000]
		[ProServer_Class120000]
		[ProServer_Class80003])
	(title "ProServer Working Programs"))

([ProServer_Class30000] of  CloFuncall

	(source "(pro.server/start-server)"))

([ProServer_Class30001] of  CloProgram

	(cloFunctions
		[ProServer_Class30003]
		[ProServer_Class30004]
		[ProServer_Class30005]
		[ProServer_Class30006]
		[ProServer_Class30007]
		[ProServer_Class30008]
		[ProServer_Class30009]
		[ProServer_Class30010]
		[ProServer_Class30011]
		[ProServer_Class30012])
	(cloNamespace [ProServer_Class30002])
	(title "Geo Calculus"))

([ProServer_Class30002] of  CloNamespace

	(title "geo.calc"))

([ProServer_Class30003] of  CloFunction

	(source "(let [cosphi1 (Math/cos phi1)\n        sinphi1 (Math/sin phi1)\n        cosaz (Math/cos az)\n        sinaz (Math/sin az)\n        sinc (Math/sin c)\n        cosc (Math/cos c)\n        phi2 (Math/asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n        lam2 (+ (Math/atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n    [phi2 lam2])")
	(title "spherical-between [^double phi1 ^double lambda0 ^double c ^double az]"))

([ProServer_Class30004] of  CloFunction

	(source "(let [pdiff (Math/sin (/ (- phi phi1) 2.0))\n        ldiff (Math/sin (/ (- lambda lambda0) 2.0))\n        rval (Math/sqrt (+ (* pdiff pdiff) (* (Math/cos phi1) (Math/cos phi) ldiff ldiff)))]\n    (* 2.0 (Math/asin rval)))")
	(title "spherical-distance [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([ProServer_Class30005] of  CloFunction

	(source "(let [ldiff (- lambda lambda0)\n        cosphi (Math/cos phi)]\n    (Math/atan2 (* cosphi (Math/sin ldiff))\n                  (- (* (Math/cos phi1) (Math/sin phi)) (* (Math/sin phi1) cosphi (Math/cos ldiff)))))")
	(title "spherical-azimuth [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([ProServer_Class30006] of  CloFunction

	(source "(let [phi (Math/toRadians lat)\n        lam (Math/toRadians lon)\n        dir (Math/toRadians crs)\n        way (* spd tim)\n        way (Math/toRadians (/ way 60))\n        [phi2 lam2] (spherical-between phi lam way dir)]\n    [(Math/toDegrees phi2) (Math/toDegrees lam2)])")
	(title "future-pos [[lat lon] crs spd tim]"))

([ProServer_Class30007] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n        ld1 (Math/toRadians lo1)\n        fi2 (Math/toRadians la2)\n        ld2 (Math/toRadians lo2)\n        rad (spherical-distance fi1 ld1 fi2 ld2)]\n    (* (Math/toDegrees rad) 60))")
	(title "distance-nm [[la1 lo1] [la2 lo2]]"))

([ProServer_Class30008] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n        ld1 (Math/toRadians lo1)\n        fi2 (Math/toRadians la2)\n        ld2 (Math/toRadians lo2)\n        rad (spherical-azimuth fi1 ld1 fi2 ld2)\n        deg (Math/toDegrees rad)]\n    (cond\n       (< deg 0) (+ deg 360.0)\n       (> deg 360.0) (- deg 360.0)\n       true deg))")
	(title "bear-deg [[la1 lo1] [la2 lo2]]"))

([ProServer_Class30009] of  CloFunction

	(source "(let [denom (- (* (- y4 y3) (- x2 x1)) (* (- x4 x3) (- y2 y1)))]\n    (if (not (== denom 0.0))\n      (let [ua (/ (- (* (- x4 x3) (- y1 y3)) (* (- y4 y3) (- x1 x3))) denom)\n            ub (/ (- (* (- x2 x1) (- y1 y3)) (* (- y2 y1) (- x1 x3))) denom)]\n        (if (and (<= 0.0 ua 1.0) (<= 0.0 ub 1.0))\n          [(+ y1 (* ua (- y2 y1))) (+ x1 (* ua (- x2 x1)))]))))")
	(title "seg-intersect [x1 y1 x2 y2 x3 y3 x4 y4]"))

([ProServer_Class30010] of  CloFunction

	(source "(let [rb (+ b 180)]\n    (if (> rb 360) (- rb 360) rb))")
	(title "rev-bear [b]"))

([ProServer_Class30011] of  CloFunction

	(source "(let [bea (bear-deg [lat1 lon1] [lat2 lon2])\n        ca1 (- bea crs)]\n    (cond\n     (> ca1 180) (- ca1 360)\n     (< ca1 -180) (+ ca1 360)\n     true ca1))")
	(title "course-angle [crs [lat1 lon1] [lat2 lon2]]"))

([ProServer_Class30012] of  CloFunction

	(source "(let [ca (course-angle crs crd1 crd2)]\n    (or (> ca 90) (< ca -90)))")
	(title "abaft [crs crd1 crd2]"))

([ProServer_Class40000] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(AdvisorSkipper)"))

([ProServer_Class40001] of  CloProgram

	(cloFunctions
		[ProServer_Class40002]
		[ProServer_Class40003]
		[ProServer_Class40004]
		[ProServer_Class40005])
	(cloNamespace [ProServer_Class40006])
	(title "Async Processing"))

([ProServer_Class40002] of  CloFunction

	(source "(when (not= @status-vol \"RUNNING\") \n  (if start-mess\n    (println start-mess))\n  (go (do \n          (while (and (= @status-vol \"RUNNING\")\n                          (or (nil? cond-func) (cond-func)))\n                (proc-func)\n                (<! (timeout time-out)))\n          (vreset! status-vol \"STOPPED\")))\n  (vreset! status-vol \"RUNNING\"))")
	(title "start-proc [status-vol proc-func time-out cond-func start-mess]"))

([ProServer_Class40003] of  CloFunction

	(source "(vreset! status-vol \"STOP\")")
	(title "stop-proc [status-vol]"))

([ProServer_Class40004] of  CloFunction

	(source "(= @status-vol \"RUNNING\")")
	(title "running? [status-vol]"))

([ProServer_Class40005] of  CloFunction

	(source "(if start-mess\n  (println start-mess))\n(go (while true\n           (proc-func)\n           (<! (timeout time-out))))")
	(title "repeater [proc-func time-out  start-mess]"))

([ProServer_Class40006] of  CloNamespace

	(source "(:require \n  [clojure.core.async :as async :refer [chan alts!! put! <! go timeout]])")
	(title "async.proc"))

([ProServer_Class50000] of  CloFunction

	(source "(letfn [(mov []\n            (doseq [[id bdt] (seq @BOATS)]\n              (let [man-func (partial mf id)]\n                (vswap! BOATS assoc id \n                  (-> bdt\n                    (move)\n                    (engine man-func)\n                    (helm man-func))))))]\n  (def add-func af)\n  (def rem-func rf)\n  (ap/start-proc mov-status #(mov) BOAT-TIO nil \"Boats movement started..\"))")
	(title "start-boat-movement [mf af rf]"))

([ProServer_Class50002] of  CloVar

	(source "(volatile! \"START\")")
	(title "mov-status"))

([ProServer_Class50003] of  CloFunction

	(source "(let [bdt {:coord coord\n               :course crs\n               :speed spd\n               :helm :steady\n               :engine spd\n               :time-from-turn 0\n               :turn-coord coord}]\n  (vswap! BOATS assoc id bdt)\n  (add-func id bdt))")
	(title "boat-add [id coord crs spd]"))

([ProServer_Class50004] of  CloFunction

	(source "(rem-func id (@BOATS id))\n(vswap! BOATS dissoc id)")
	(title "boat-rem [id]"))

([ProServer_Class60000] of  CloFunction

	(source "(vswap! BOATS assoc-in [id :helm] cmd)")
	(title "boat-helm [id cmd]"))

([ProServer_Class60001] of  CloFunction

	(source "(let [knots (max (min knots SPD-MAX) SPD-MIN)]\n  (vswap! BOATS assoc-in [id :engine] knots))")
	(title "boat-engine [id knots]"))

([ProServer_Class60003] of  CloFunction

	(source "(ap/stop-proc mov-status)")
	(title "stop-boat-movement []"))

([ProServer_Class70000] of  CloFuncall

	(source "(boat.mov/boat-add pro.server/ONBOARD pro.server/MAP-CENTER 0 0)"))

([ProServer_Class70001] of  CloFuncall

	(source "(pro.server/stop-server)"))

([ProServer_Class70008] of  CloVar

	(source "nil")
	(title "rem-func"))

([ProServer_Class70009] of  CloVar

	(title "add-func"))

([ProServer_Class80000] of  CloFunction

	(source "(slurp (str ROOT \"index.html\"))")
	(title "index-page []"))

([ProServer_Class80003] of  CloProgram

	(cloFunctions
		[ProServer_Class80000]
		[ProServer_Class80018]
		[ProServer_Class80019]
		[ProServer_Class80004]
		[ProServer_Class80017]
		[ProServer_Class100000]
		[ProServer_Class140002]
		[ProServer_Class80007]
		[ProServer_Class80008]
		[ProServer_Class80009])
	(cloNamespace [ProServer_Class80016])
	(cloVars
		[ProServer_Class90000]
		[ProServer_Class80012]
		[ProServer_Class80013]
		[ProServer_Class80014]
		[ProServer_Class80015]
		[ProServer_Class100001]
		[ProServer_Class110000])
	(title "Pro Server"))

([ProServer_Class80004] of  CloFunction

	(source "(let [baos (ByteArrayOutputStream.)\n        w    (t/writer baos :json)\n        _    (t/write w x)\n        ret  (.toString baos)]\n    (.reset baos)\n    ret)")
	(title "write-transit [x]"))

([ProServer_Class80007] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (index-page))\n  (GET \"/map-center/\" [] (write-transit MAP-CENTER))\n  (GET \"/questions/\" [& params] (questions params))\n  (GET \"/events/\" [] (events))\n  (GET \"/command/\" [& params] (command params))\n  (GET \"/czml/\" [] (cz/events))\n  (route/files \"/\" (do (println [:ROOT-FILES ROOT]) {:root ROOT}))\n  (route/resources \"/\")\n  (route/not-found \"Not Found\"))\n\n(def APP\n  (handler/site app-routes))")
	(title "init-server []"))

([ProServer_Class80008] of  CloFunction

	(source "([]\n    (start-server PORT))\n([port]\n  (if (nil? APP)\n    (init-server))\n  (def SERV (jetty/run-jetty APP {:port port :join? false}))\n  (bm/start-boat-movement\n    #(pump-in-evt {:event :boat-maneuver :id %1 :data %2})\n    #(pump-in-evt {:event :boat-add :id %1 :data %2})\n    #(pump-in-evt {:event :boat-remove :id %1 :data %2})))")
	(title "start-server"))

([ProServer_Class80009] of  CloFunction

	(source "(when-let [serv SERV]\n  (bm/stop-boat-movement)\n  (.stop serv)\n  (def SERV nil)\n  (println \"Server stopped!\"))")
	(title "stop-server []"))

([ProServer_Class80012] of  CloVar

	(source "(chan)")
	(title "EVT-CHN"))

([ProServer_Class80013] of  CloVar

	(source "4444")
	(title "PORT"))

([ProServer_Class80014] of  CloVar

	(source "nil")
	(title "APP"))

([ProServer_Class80015] of  CloVar

	(source "nil")
	(title "SERV"))

([ProServer_Class80016] of  CloNamespace

	(source "(:import java.io.ByteArrayOutputStream)\n(:require [ring.adapter.jetty :as jetty]\n              [ring.util.response :as r]\n              [compojure.core :refer [defroutes GET]]\n              [compojure.handler :as handler]\n              [compojure.route :as route]\n              [cognitect.transit :as t]\n              [clojure.core.async :as async :refer [chan alts!! put! <! go timeout]]\n              [boat.mov :as bm]\n              [cesium.core :as cz])")
	(title "pro.server"))

([ProServer_Class80017] of  CloFunction

	(source "(-> (r/response (write-transit (deref (future (pump-out EVT-CHN)))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\"))")
	(title "events []"))

([ProServer_Class80018] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out [chn]"))

([ProServer_Class80019] of  CloFunction

	(source "(put! EVT-CHN val)")
	(title "pump-in-evt [val]"))

([ProServer_Class90000] of  CloVar

	(source "(str (System/getProperty \"user.dir\") \"/resources/public/\")")
	(title "ROOT"))

([ProServer_Class90012] of  CloFuncall

	(source "(boat.mov/boat-rem pro.server/ONBOARD)"))
