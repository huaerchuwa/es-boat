; Sat May 14 12:47:49 MSK 2016
; 
;+ (version "3.5")
;+ (build "Build 663")

([ProServer_Class0] of  CloProgram

	(cloFunctions
		[ProServer_Class2]
		[ProServer_Class100011])
	(cloNamespace [ProServer_Class1])
	(title "Clojure Work"))

([ProServer_Class1] of  CloNamespace

	(source "(:use protege.core)\n(:import clojuretab.ClojureTab)")
	(title "menu.item"))

([ProServer_Class10000] of  CloProgram

	(cloFunctions
		[ProServer_Class10011]
		[ProServer_Class10010]
		[ProServer_Class10012]
		[ProServer_Class50000]
		[ProServer_Class60003]
		[ProServer_Class50003]
		[ProServer_Class50004]
		[ProServer_Class60000]
		[ProServer_Class60001]
		[ProServer_Class20002]
		[ProServer_Class20000]
		[ProServer_Class20001])
	(cloNamespace [ProServer_Class10001])
	(cloVars
		[ProServer_Class10003]
		[ProServer_Class10004]
		[ProServer_Class10005]
		[ProServer_Class10006]
		[ProServer_Class10007]
		[ProServer_Class10008]
		[ProServer_Class10009]
		[ProServer_Class50002]
		[ProServer_Class70008]
		[ProServer_Class70009])
	(documentation [ProServer_Class10002])
	(title "Boat Movement"))

([ProServer_Class100000] of  CloFunction

	(source ";;(println [:MANEUVER params])\n(let [crd (:coord params)\n       crd [(read-string (get crd \"0\"))\n              (read-string (get crd \"1\"))]]\n  (vswap! BOAT assoc\n	:coord crd\n	:turn-coord crd\n	:course (:course params)\n	:speed (:speed params))\n  (pump-in-mvr))\n{:status 204}")
	(title "maneuver [params]"))

([ProServer_Class100001] of  CloVar

	(source "(volatile! {:id \"b1\"})")
	(title "BOAT"))

([ProServer_Class100004] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"astern\")\n(Island title ?tit side \"ASTERN\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsAstern_Isl"))

([ProServer_Class100005] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"what-is\"\n	subject ?sub\n	((not= ?sub \"behind the island\")\n	 (not= ?sub \"before the island\")))")
	(rhs "(pro.server/pump-in-ans \n  (as/ans-islands @?acc ?sub))")
	(salience -1)
	(title "as:AnswerIslandsOnSide"))

([ProServer_Class100008] of  CloNamespace

	(title "as"))

([ProServer_Class10001] of  CloNamespace

	(source "(:require\n  [geo.calc :as geo]\n  [async.proc :as ap])")
	(title "boat.mov"))

([ProServer_Class100011] of  CloFunction

	(source "(System/currentTimeMillis)")
	(title "current-time []"))

([ProServer_Class10002] of  CloDocumentation

	(source "All boats data:\n\nBOATS - { id1 <boat_data1> ... }\n\nBoat data:\n\n{:coord [lat<lat-degrees-float> lon <lon-degrees-float>] \n :course <crs-degrees-int> \n :speed <spd-knots-int>\n :helm <:steady/:port/:hard-a-port/:starboard/:hard-a-starboard>\n :engine <target speed-knots-int (negative = reverse)>\n :time-from-turn <msec> \n :turn-coord [lat lon]}}\n\nBoat constants:\n\nCRS-STP - step of normal course update\nCRS-HRD - step of hard course update\n\nSPD-STP - step of speed update\nSPD-MAX - max speed (positive)\nSPD-MIN - min speed (negative)\n\nBOAT-TIO - timeout interval of boat data update\n\nAPI:\n\nstart-boats-movement [f] ;; (f <boat_data>)- func of sending mees when\n                                          ;; speed or course changing\n(boat-add id coord crs spd f) ;; or boat adding\n(boat-rem id f)                       ;;  or removing\n(boat-helm id cmd) ;; cmd=<:steady/:starboard/:hard-starboard/:port/:hard-port>\n(boat-engine id knots) ;; knots-int\n(coord id)\n(speed id)\n(course id)"))

([ProServer_Class10003] of  CloVar

	(source "(defonce BOATS (volatile! {}))")
	(title "DEF-BOATS"))

([ProServer_Class10004] of  CloVar

	(source "6")
	(title "CRS-STP"))

([ProServer_Class10005] of  CloVar

	(source "18")
	(title "CRS-HRD"))

([ProServer_Class10006] of  CloVar

	(source "0.6")
	(title "SPD-STP"))

([ProServer_Class10007] of  CloVar

	(source "44")
	(title "SPD-MAX"))

([ProServer_Class10008] of  CloVar

	(source "-8")
	(title "SPD-MIN"))

([ProServer_Class10009] of  CloVar

	(source "1000")
	(title "BOAT-TIO"))

([ProServer_Class10010] of  CloFunction

	(source "(let [cp (fn [crs] (if (>= crs 360) (- crs 360) crs))\n       cm (fn [crs] (if (< crs 0) (+ crs 360) crs))\n       old (:course bdt)\n       tgt (:helm bdt)]\n  (if (not= tgt :steady)\n    (let [nbd (assoc bdt \n                    :course (condp = tgt\n                                  :starboard (cp (+ old CRS-STP))\n                                  :hard-a-starboard (cp (+ old CRS-HRD))\n                                  :port (cm (- old CRS-STP))\n                                  :hard-a-port (cm (- old CRS-HRD))\n                                  bdt)\n                    :time-from-turn 0\n                    :turn-coord (:coord bdt))]\n      (f nbd)\n      nbd)\n    bdt))")
	(title "helm [bdt f]"))

([ProServer_Class10011] of  CloFunction

	(source "(let [old (:speed bdt)\n       tgt (:engine bdt)\n       new (cond\n                (> tgt old) (+ old SPD-STP)\n                (< tgt old) (- old SPD-STP)\n                true 0)]\n  (if (= new 0)\n    bdt\n    (let [nbd (assoc bdt \n                    :speed (if (or (and (< old tgt) (>= new tgt))\n                                         (and (> old tgt) (<= new tgt)))\n                                 tgt\n                                 new)\n                    :time-from-turn 0\n                    :turn-coord (:coord bdt))]\n      (f nbd)\n      nbd)))")
	(title "engine [bdt f]"))

([ProServer_Class10012] of  CloFunction

	(source "(let [etim (+ (:time-from-turn bdt) BOAT-TIO)\n       ehrs (/ etim 36000000)]\n  (assoc bdt :coord (geo/future-pos (:turn-coord bdt) (:course bdt) (:speed bdt) ehrs)\n                    :time-from-turn etim))")
	(title "move [bdt]"))

([ProServer_Class110000] of  StartPoint

	(coord 62.4444 5.88)
	(title "Geiranger Entrance"))

([ProServer_Class110002] of  Rule

	(lhs "?a (Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"before the island\"\n	object ?tit1)\n(Island sector ?sec\n	title ?tit1\n	polar ?pol1)\n(Island sector ?sec\n	title ?tit2\n	polar ?pol2\n	(> (second ?pol1)\n	    (second ?pol2)))")
	(rhs "(vswap! ?acc conj [?tit2 (second ?pol2)])")
	(salience 0)
	(title "as:IslandsBefore"))

([ProServer_Class110003] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"what-is\"\n	subject \"before the island\"\n	object ?tit)")
	(rhs "(pro.server/pump-in-ans \n  (as/ans-islands @?acc \n    (str \"before the island \" ?tit)))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerIslandsBefore"))

([ProServer_Class110004] of  CloFunction

	(source "(println \"Chart client connected..\")\n(vswap! BOAT assoc \n	:chart true\n	:coord (map-center)\n	:course 0)\n(pump-in-evt \n  {:event :boat-add \n   :id (:id @BOAT) \n   :data @BOAT})\n;;(pump-in-evt \n;;  {:event :boat-follow\n;;   :id (:id @BOAT)})\n(map-center)")
	(title "chart-connect []"))

([ProServer_Class120000] of  CloProgram

	(cloFunctions
		[ProServer_Class120003]
		[ProServer_Class120004]
		[ProServer_Class120005]
		[ProServer_Class120012]
		[ProServer_Class130000]
		[ProServer_Class120014]
		[ProServer_Class120015]
		[ProServer_Class120016]
		[ProServer_Class220000])
	(cloNamespace [ProServer_Class120001])
	(cloVars
		[ProServer_Class120002]
		[ProServer_Class120013])
	(title "Cesium Server"))

([ProServer_Class120001] of  CloNamespace

	(source "(:require\n    [ring.adapter.jetty :as jetty]\n    [ring.util.response :as r]\n    [compojure.core :refer [defroutes routes GET]]\n    [compojure.handler :as handler]\n    [compojure.route :as route]\n    [clojure.core.async :as async :refer [chan put! alts!!]]\n    [boat.mov :as bm]\n    [async.proc :as ap])\n(:import java.util.Calendar)")
	(title "cesium.core"))

([ProServer_Class120002] of  CloVar

	(source "(async/chan)")
	(title "CZ-CHAN"))

([ProServer_Class120003] of  CloFunction

	(source "(async/put! CZ-CHAN [typ (.trim dat)])")
	(title "send-event [typ dat]"))

([ProServer_Class120004] of  CloFunction

	(source "(loop [[bit ch] (alts!! [CZ-CHAN] :default :none) bits []]\n    (if (= bit :none)\n      bits\n      (recur (alts!! [CZ-CHAN] :default :none) (conj bits bit))))")
	(title "pump-out-events []"))

([ProServer_Class120005] of  CloFunction

	(source "(let [evt-hr (fn [[typ dat]]\n                   (str \"event: \" typ \"\\ndata: \" dat \"\\n\\n\"))\n       ee (deref (future (pump-out-events)))\n       resp (if (seq ee)\n                 (apply str (map evt-hr ee))\n                 \"\")]\n  (-> (r/response resp)\n         (r/header \"Access-Control-Allow-Origin\" \"*\")\n         (r/header \"Content-Type\" \"text/event-stream;charset=utf-8\")))")
	(title "events []"))

([ProServer_Class120012] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       yar (.get cld Calendar/YEAR )\n       mon (inc (.get cld Calendar/MONTH))\n       dat (.get cld Calendar/DATE)\n       hor (.get cld Calendar/HOUR_OF_DAY)\n       min (.get cld Calendar/MINUTE)\n       sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601curt []"))

([ProServer_Class120013] of  CloVar

	(source "true")
	(title "DOC-SND"))

([ProServer_Class120014] of  CloFunction

	(source "(str \"{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\",\\\"clock\\\":{\\\"currentTime\\\":\\\"\" (iso8601curt) \"\\\"}}\")")
	(title "doc []"))

([ProServer_Class120015] of  CloFunction

	(source "(when DOC-SND\n    (send-event \"czml\" (doc))\n    (def DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"availability\\\":\\\"\"\n               (iso8601curt) \"/\" (iso8601futt span-sec)\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\" \n               scale\n               \" ,\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -24]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\"\n               lon\n               \", \"\n               lat\n               \", \"\n               alt\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "location [label scale img-url lat lon alt span-sec]"))

([ProServer_Class120016] of  CloFunction

	(source "(when DOC-SND\n    (send-event \"czml\" (doc))\n    (def DOC-SND false))\n  (let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\"\n               (/ scale 2)\n               \",\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -8]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\\\"\"\n               tim1\n               \"\\\", \"\n               lon1\n               \", \"\n               lat1\n               \", \"\n               alt1\n               \",\\\"\"\n               tim2\n               \"\\\", \"\n               lon2\n               \", \"\n               lat2\n               \", \"\n               alt2\n               \"]}}\")]\n    (send-event \"czml\" p))")
	(title "leg [label img-url scale [lat1 lon1 alt1 tim1] [lat2 lon2 alt2 tim2]]"))

([ProServer_Class130000] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       mil (.getTimeInMillis cld)\n       _ (.setTimeInMillis cld (+ mil (* sec 1000)))\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601futt [sec]"))

([ProServer_Class140000] of  Rule

	(lhs "?no (NamedObject coord ?oco\n	time ?tim1)\n(Question coord ?bco\n	course ?crs\n	time ?tim2\n	((vector? ?bco)\n	 (> ?tim2 ?tim1)))")
	(rhs "(let [bea (geo.calc/bear-deg ?bco ?oco)\n       dis (geo.calc/distance-nm ?bco ?oco)\n       sec (geo.calc/sector bea ?crs)\n       sid (geo.calc/side sec)]\n  (modify ?no polar [bea dis]\n	side sid\n	time ?tim2))")
	(salience 1)
	(title "as:UpdatePolarCoordObject"))

([ProServer_Class140001] of  CloFuncall

	(source "(ru.rules/f 7)"))

([ProServer_Class140002] of  CloFunction

	(source ";;(println [:QUESTION pp])\n(let [frm ['Question\n	'predicate (:predicate pp)\n	'subject (:subject pp)\n	'subject-value (:subject-value pp)\n	'object (:object pp)\n	'object-value (:object-value pp)\n	'time (as/current-time)]\n       frm (if-let [crd (:coord pp)]\n                (concat frm\n	['coord [(read-string (get crd \"0\"))\n	            (read-string (get crd \"1\"))]\n	 'course (read-string (:course pp))\n	 'speed (read-string (:speed pp))])\n                frm)]\n  (rete/assert-frame frm)\n  (rete/fire)\n  {:status 204})")
	(title "question [pp]"))

([ProServer_Class150000] of  CloFunction

	(source "(let [address (str \"http://localhost:\" PORT)]\n  (println \"Location:\" address)\n  (when (java.awt.Desktop/isDesktopSupported)\n    (.browse (java.awt.Desktop/getDesktop) (java.net.URI. address))))")
	(title "view3D-in-browser []"))

([ProServer_Class150002] of  CloFuncall

	(source "(ru.rules/f 13)"))

([ProServer_Class150003] of  CloVar

	(source "(volatile! [])")
	(title "DATA"))

([ProServer_Class150015] of  CloFunction

	(source "(or (> (Math/abs (- lat1 lat2)) 0.02)\n     (> (Math/abs (- lon1 lon2)) 0.02))")
	(title "obsolete [[lat1 lon1] [lat2 lon2]]"))

([ProServer_Class150021] of  Rule

	(lhs "?i (Island coord ?ico\n	time ?tim1)\n(Question coord ?bco\n	course ?crs\n	time ?tim2\n	((vector? ?bco)\n	 (> ?tim2 ?tim1)))")
	(rhs "(let [bea (geo.calc/bear-deg ?bco ?ico)\n       dis (geo.calc/distance-nm ?bco ?ico)\n       sec (geo.calc/sector bea ?crs)\n       sid (geo.calc/side sec)]\n  (modify ?i polar [bea dis]\n	sector sec\n	side sid\n	time ?tim2))")
	(salience 1)
	(title "as:UpdatePolarCoordIsland"))

([ProServer_Class160000] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"ahead\")\n(Island title ?tit side \"AHEAD\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsAhead_Isl"))

([ProServer_Class160001] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"on the starboard bow\")\n(Island title ?tit side \"STAR-BOW\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsStarBow_Isl"))

([ProServer_Class160002] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"on the port bow\")\n(Island title ?tit side \"PORT-BOW\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsPortBow_Isl"))

([ProServer_Class160003] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"on the starboard beam\")\n(Island title ?tit side \"STAR-BEAM\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsStarBeam_Isl"))

([ProServer_Class160004] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"on the port beam\")\n(Island title ?tit side \"PORT-BEAM\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsPortBeam_Isl"))

([ProServer_Class160005] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"abaft the starboard beam\")\n(Island title ?tit side \"STAR-ABAFT\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsStarAbaft_Isl"))

([ProServer_Class160009] of  Rule

	(lhs "?i (Island time ?tim1)\n(OSMData time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(retract ?i)")
	(salience 2)
	(title "as:RetractObsoleteIsland"))

([ProServer_Class160010] of  Run

	(butt-ass-inss "Assert Instances/ru.rules/ass-inss")
	(butt-fire "Fire/ru.rules/fire-all-rules")
	(butt-reset "Reset/ru.rules/do-reset")
	(butt-retr-inss "Retract Instances/ru.rules/retr-inss")
	(butt-run "Run/ru.rules/run-engine")
	(facts
		[ProServer_Class50001]
		[ProServer_Class60002]
		[ProServer_Class260002]
		[ProServer_Class80002]
		[ProServer_Class270001])
	(rule-sets [ProServer_Class160099])
	(title "AS Run")
	(trace FALSE))

([ProServer_Class160030] of  Rule

	(lhs "?h1 (History time ?tim1)\n?h2 (History time ?tim2\n	(.before ?tim1 ?tim2))")
	(rhs "(retract ?h1)")
	(salience 2)
	(title "MoveHistory"))

([ProServer_Class160041] of  CloProgram

	(cloFunctions
		[ProServer_Class160044]
		[ProServer_Class160045]
		[ProServer_Class160043]
		[ProServer_Class160062]
		[ProServer_Class160046]
		[ProServer_Class260004]
		[ProServer_Class160068]
		[ProServer_Class90013]
		[ProServer_Class150015]
		[ProServer_Class280005])
	(cloNamespace [ProServer_Class160042])
	(cloVars [ProServer_Class150003])
	(title "OSM Data"))

([ProServer_Class160042] of  CloNamespace

	(source "(:require\n   [clojure.xml :as x]\n   [menu.item :as mi]\n   [async.proc :as ap]\n   [rete.core :as rete])")
	(title "osm.data"))

([ProServer_Class160043] of  CloFunction

	(source "(try\n  (let [curl (osm-api-url bbx)\n         xml (x/parse curl)\n         cnt (:content xml)\n         nods (filter #(= (:tag %) :node) cnt)\n         nnn (filter #(some? (:content %)) nods)]\n      (map tag-tags-namcor nnn))\n  (catch Exception e\n    (println e)\n    nil))")
	(title "osm-data [bbx]"))

([ProServer_Class160044] of  CloFunction

	(source "(let [[w s e n] bbx] \n  (str \"http://api.openstreetmap.org/api/0.6/map?bbox=\" w \",\" s \",\" e \",\" n))")
	(title "osm-api-url [bbx]"))

([ProServer_Class160045] of  CloFunction

	(source "(let [cnt (:content tag)\n       tt (filter #(= (:tag %) :tag) cnt)\n       m {\"id\" (:id (:attrs tag))\n             \"lat\" (read-string (:lat (:attrs tag)))\n             \"lon\" (read-string (:lon (:attrs tag)))}\n       ml (cons m (map #(assoc {} (:k (:attrs %)) (:v (:attrs %))) tt))]\n  (apply merge ml))")
	(title "tag-tags-namcor [tag]"))

([ProServer_Class160046] of  CloFunction

	(source "(filter #(= (get % k) v) data)")
	(title "filter-kv [k v data]"))

([ProServer_Class160062] of  CloFunction

	(source "(filter #(some? (get % k)) data)")
	(title "filter-k [k data]"))

([ProServer_Class160068] of  CloFunction

	(source "(sort (set (mapcat keys data)))")
	(title "tags [data]"))

([ProServer_Class160099] of  RuleSet

	(rules
		[ProServer_Class160009]
		[ProServer_Class260000]
		[ProServer_Class90006]
		[ProServer_Class260003]
		[ProServer_Class90012]
		[ProServer_Class150021]
		[ProServer_Class140000]
		[ProServer_Class210011]
		[ProServer_Class80001]
		[ProServer_Class160000]
		[ProServer_Class210001]
		[ProServer_Class100004]
		[ProServer_Class210002]
		[ProServer_Class210003]
		[ProServer_Class30000]
		[ProServer_Class160004]
		[ProServer_Class210004]
		[ProServer_Class160002]
		[ProServer_Class210005]
		[ProServer_Class160005]
		[ProServer_Class210006]
		[ProServer_Class160003]
		[ProServer_Class210007]
		[ProServer_Class160001]
		[ProServer_Class210008]
		[ProServer_Class200021]
		[ProServer_Class70000]
		[ProServer_Class110002]
		[ProServer_Class210000]
		[ProServer_Class100005]
		[ProServer_Class250000]
		[ProServer_Class200019]
		[ProServer_Class210012]
		[ProServer_Class180000]
		[ProServer_Class110003]
		[ProServer_Class110003])
	(templates
		[OSMData]
		[NamedObject]
		[Island]
		[NearbyObjects]
		[NearbyIslands]
		[Question]
		[Answer]
		[Answer2])
	(title "AdvisorSkipper"))

([ProServer_Class170000] of  CloFunction

	(source "(str tit (format \" (%.1f nm)\" dis))")
	(title "tit-dis [[tit dis]]"))

([ProServer_Class170003] of  CloFuncall

	(source "(ru.rules/f 8)"))

([ProServer_Class180000] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"what-is\"\n	subject \"behind the island\"\n	object ?tit)")
	(rhs "(pro.server/pump-in-ans \n  (as/ans-islands @?acc \n    (str \"behind the island \" ?tit)))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerIslandsBehind"))

([ProServer_Class190000] of  CloFuncall

	(source "(ru.rules/f 10)"))

([ProServer_Class190001] of  Rule

	(lhs "?b (Behind time ?tim1)\n(OSMData time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(retract ?b)")
	(salience 2)
	(title "as:RetractObsoleteBehind"))

([ProServer_Class2] of  CloFunction

	(source "(println \"INITIALIZING EXPERT SYSTEM\")\n(println \"1.Loading Clojure Programs...\")\n(if-let [wps (seq (cls-instances \"WorkingPrograms\"))]\n  (loop [i 1 pins (svs (first wps) \"cloPrograms\")]\n    (when (seq pins)\n      (println (str \" 1.\" i \" \" (sv (first pins) \"title\") \" = \" (ClojureTab/loadProgram (first pins)) ))\n      (recur (inc i) (rest pins))))\n  (println \"  Instance of WorkingPrograms not found!\"))\n(println \"2.Starting Rule Engine...\")\n(ClojureTab/invoke \"ru.rules\" \"run-engine\" \"AS Run\")\n(println \"3.Starting server...\")\n(ClojureTab/invoke \"pro.server\" \"start-server\")\n(println (str \"StartPoint: \" (ClojureTab/invoke \"pro.server\" \"map-center\")))\n(println \"4.Opening 3DView in a browser...\")\n(ClojureTab/invoke  \"pro.server\" \"view3D-in-browser\")\n(println \"EXPERT SYSTEM INITIALIZED\")")
	(title "clojure-work []"))

([ProServer_Class20000] of  CloFunction

	(source "(get-in @BOATS [id :speed])")
	(title "speed [id]"))

([ProServer_Class200000] of  CloFuncall

	(source "(ru.rules/f 21)"))

([ProServer_Class200001] of  CloFuncall

	(source "(ru.rules/f 41)"))

([ProServer_Class200002] of  CloFuncall

	(source "(ru.rules/f 54)"))

([ProServer_Class200003] of  CloFuncall

	(source "(ru.rules/f 48)"))

([ProServer_Class200004] of  CloFuncall

	(source "(ru.rules/f 47)"))

([ProServer_Class20001] of  CloFunction

	(source "(get-in @BOATS [id :course])")
	(title "course [id]"))

([ProServer_Class200018] of  CloFunction

	(source "(let [acc (sort-by second accum)\n       cnt (count acc)]\n  (condp > cnt\n    1 (str \"No islands in sight \" subject)\n    2 (str \"Island \" (tit-dis (first acc)) \" is \" subject)\n    6 (str \"Islands: \" (apply str (interpose \", \" (map tit-dis acc))) \" are \" subject)\n    (str \"Islands: \" (apply str (interpose \", \" (map tit-dis (take 5 acc)))) \" and more \" (- cnt 5) \" islands are \" subject)))")
	(title "ans-islands [accum subject]"))

([ProServer_Class200019] of  Rule

	(lhs "(Answer accum ?acc)\n?q (Question predicate \"nearby-islands\")")
	(rhs "(pro.server/pump-in-ans (sort @?acc))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerNearbyIslands"))

([ProServer_Class20002] of  CloFunction

	(source "(get-in @BOATS [id :coord])")
	(title "coord [id]"))

([ProServer_Class200021] of  Rule

	(lhs "?a (Answer accum ?acc)\n(Question predicate \"nearby-islands\")\n(Island title ?tit)")
	(rhs "(vswap! ?acc conj ?tit)")
	(salience 0)
	(title "as:NearbyIslands"))

([ProServer_Class210000] of  Rule

	(lhs "(OSMData radius ?rad)\n?q (Question predicate \"where-is\"\n	subject \"island\"\n	object ?tit)\n(Island sector ?sec\n	title ?tit\n	side ?sid\n	polar ?pol\n	coord ?crd)")
	(rhs "(let [[bea dis] ?pol\n       sid (condp = ?sid\n               \"AHEAD\"          \"ahead\"\n               \"STAR-BOW\"    \"on the starboard bow\"\n               \"STAR-BEAM\"   \"on the starboard beam\"\n               \"STAR-ABAFT\" \"abaft the starboard beam\"\n               \"ASTERN\"         \"astern\"\n               \"PORT-ABAFT\" \"abaft the port beam\"\n               \"PORT-BEAM\"  \"on the port beam\"\n               \"PORT-BOW\"   \"on the port bow\")\n       ans (str ?tit \" is in \" (format \"%.1f miles\" dis) \" \" sid)]\n  (pro.server/pump-in-ans ans)\n  (cesium.core/point-out ?tit ?crd dis ?rad))\n(retract ?q)")
	(salience 0)
	(title "as:WhereIsIsland"))

([ProServer_Class210001] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"ahead\")\n(NamedObject title ?tit \n	side \"AHEAD\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame\n	aeroway ?aer\n	highway ?hig\n	waterway ?wat\n	tourism ?tou)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)])\n  (some? ?aer) (vswap! ?aml conj [?aer ?tit (second ?pol)])\n  (some? ?hig) (vswap! ?aml conj [?hig ?tit (second ?pol)])\n  (some? ?wat) (vswap! ?aml conj [?wat ?tit (second ?pol)])\n  (some? ?tou) (vswap! ?aml conj [?tou ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsAhead_Obj"))

([ProServer_Class210002] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"astern\")\n(NamedObject title ?tit \n	side \"ASTERN\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)])\n  (some? ?aer) (vswap! ?aml conj [?aer ?tit (second ?pol)])\n  (some? ?hig) (vswap! ?aml conj [?hig ?tit (second ?pol)])\n  (some? ?wat) (vswap! ?aml conj [?wat ?tit (second ?pol)])\n  (some? ?tou) (vswap! ?aml conj [?tou ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsAstern_Obj"))

([ProServer_Class210003] of  Rule

	(lhs "(Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"abaft the port beam\")\n(Island title ?tit side \"PORT-ABAFT\"\n	polar ?pol)")
	(rhs "(vswap! ?acc conj [?tit (second ?pol)])")
	(salience 0)
	(title "as:WhatIsPortAbaft_Isl"))

([ProServer_Class210004] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"on the port beam\")\n(NamedObject title ?tit \n	side \"PORT-BEAM\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)])\n  (some? ?aer) (vswap! ?aml conj [?aer ?tit (second ?pol)])\n  (some? ?hig) (vswap! ?aml conj [?hig ?tit (second ?pol)])\n  (some? ?wat) (vswap! ?aml conj [?wat ?tit (second ?pol)])\n  (some? ?tou) (vswap! ?aml conj [?tou ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsPortBeam_Obj"))

([ProServer_Class210005] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"on the port bow\")\n(NamedObject title ?tit \n	side \"PORT-BOW\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)])\n  (some? ?aer) (vswap! ?aml conj [?aer ?tit (second ?pol)])\n  (some? ?hig) (vswap! ?aml conj [?hig ?tit (second ?pol)])\n  (some? ?wat) (vswap! ?aml conj [?wat ?tit (second ?pol)])\n  (some? ?tou) (vswap! ?aml conj [?tou ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsPortBow_Obj"))

([ProServer_Class210006] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"abaft the starboard beam\")\n(NamedObject title ?tit \n	side \"STAR-ABAFT\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)])\n  (some? ?aer) (vswap! ?aml conj [?aer ?tit (second ?pol)])\n  (some? ?hig) (vswap! ?aml conj [?hig ?tit (second ?pol)])\n  (some? ?wat) (vswap! ?aml conj [?wat ?tit (second ?pol)])\n  (some? ?tou) (vswap! ?aml conj [?tou ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsStarAbaft_Obj"))

([ProServer_Class210007] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"on the starboard beam\")\n(NamedObject title ?tit \n	side \"STAR-BEAM\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)])\n  (some? ?aer) (vswap! ?aml conj [?aer ?tit (second ?pol)])\n  (some? ?hig) (vswap! ?aml conj [?hig ?tit (second ?pol)])\n  (some? ?wat) (vswap! ?aml conj [?wat ?tit (second ?pol)])\n  (some? ?tou) (vswap! ?aml conj [?tou ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsStarBeam_Obj"))

([ProServer_Class210008] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"on the starboard bow\")\n(NamedObject title ?tit \n	side \"STAR-BOW\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)])\n  (some? ?aer) (vswap! ?aml conj [?aer ?tit (second ?pol)])\n  (some? ?hig) (vswap! ?aml conj [?hig ?tit (second ?pol)])\n  (some? ?wat) (vswap! ?aml conj [?wat ?tit (second ?pol)])\n  (some? ?tou) (vswap! ?aml conj [?tou ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsStarBow_Obj"))

([ProServer_Class210011] of  Rule

	(lhs "?a (Answer time ?tim1)\n(Question time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(modify ?a accum (volatile! [])\n	time ?tim2)")
	(salience 1)
	(title "as:InitAnswer"))

([ProServer_Class210012] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml\n	aeroway-list ?ael\n	highway-list ?hil\n	waterway-list ?wal\n	tourism-list ?tol)\n?q (Question predicate \"nearby-objects\"\n	subject ?sub)")
	(rhs "(condp = ?sub\n  \"place\" (pro.server/pump-in-ans (sort @?pll))\n  \"natural\" (pro.server/pump-in-ans (sort @?nal))\n  \"amenity\" (pro.server/pump-in-ans (sort @?aml)))\n  \"aeroway\" (pro.server/pump-in-ans (sort @?ael)))\n  \"highway\" (pro.server/pump-in-ans (sort @?hil)))\n  \"waterway\" (pro.server/pump-in-ans (sort @?wal)))\n  \"tourism\" (pro.server/pump-in-ans (sort @?tol)))\n(retract ?q)")
	(salience -1)
	(title "as:AnswerNearbyObjects"))

([ProServer_Class220000] of  CloFunction

	(source "(let [min-scl 0.25\n       scl (+ min-scl (* (- 1 min-scl) (- 1 (/ dist max-dist))))]\n  (location txt scl \"img/arrdn.png\" lat lon 100 40))")
	(title "point-out [txt [lat lon] dist max-dist]"))

([ProServer_Class230000] of  CloFunction

	(source "(if (:chart @BOAT)\n    (pump-in-evt \n      {:event :boat-maneuver\n       :id (:id @BOAT) \n       :data @BOAT}))")
	(title "pump-in-mvr []"))

([ProServer_Class230002] of  StartPoint

	(coord 44.124 -68.736)
	(title "Near Isle Au Haut"))

([ProServer_Class240000] of  CloFunction

	(source "(if-let [ins (fainst (cls-instances \"StartPoint\") nil)]\n  (vec (svs ins \"coord\"))\n  (do (println \"Annotated instance of StartPoint not found!\")\n    [44.124 -68.736]))")
	(title "map-center []"))

([ProServer_Class250000] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml\n	aeroway-list ?ael\n	highway-list ?hil\n	waterway-list ?wal\n	tourism-list ?tol)\n?q (Question predicate \"what-is\"\n	subject ?sub)")
	(rhs "(pro.server/pump-in-ans \n  (as/ans-objects @?pll @?nal @?aml @?ael @?hil @?wal @?tol ?sub))\n(retract ?q)")
	(salience -2)
	(title "as:AnswerObjectsOnSide"))

([ProServer_Class250001] of  CloFunction

	(source "(letfn [(anso [acc cnt pfx]\n	(condp > cnt\n	  1 \"\"\n	  2 (str pfx \" object \" (kind-tit-dis (first acc)) \",<br>\")\n	  6 (str pfx \" objects: \" (apply str (interpose \", \" (map kind-tit-dis acc))) \",<br>\")\n	  (str pfx \" objects: \" (apply str (interpose \", \" (map kind-tit-dis (take 5 acc)))) \" and more \" (- cnt 5) \",<br>\")))]\n  (let [pll (sort-by second pll) cpl (count pll)\n          nal (sort-by second nal) cnl (count nal)\n          aml (sort-by second aml) cal (count aml)\n          ael (sort-by second ael) cae (count ael)\n          hil (sort-by second hil) chi (count hil)\n          wal (sort-by second wal) cwa (count wal)\n          tol (sort-by second tol) cto (count tol)]\n    (str\n      (if (= (+ cpl cnl cal cae chi cwa cto) 0)\n        \"No objects in sight \"\n        (str (anso pll cpl \"Place\")\n              (anso nal cnl \"Natural\")\n              (anso aml cal \"Amenity\")\n              (anso ael cae \"Aeroway\")\n              (anso hil chi \"Highway\")\n              (anso wal cwa \"Waterway\")\n              (anso tol cto \"Tourism\")))\n      \"are \" subject)))")
	(title "ans-objects [pll nal aml ael hil wal tol subject]"))

([ProServer_Class260000] of  Rule

	(lhs "?no (NamedObject time ?tim1)\n(OSMData time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(retract ?no)")
	(salience 2)
	(title "as:RetractObsoleteObjects"))

([ProServer_Class260002] of  NearbyObjects

	(time 0))

([ProServer_Class260003] of  Rule

	(lhs "?no (NearbyObjects time ?tim1)\n(Question coord ?bco\n	course ?crs)\n(OSMData volume ?vol \n	time ?tim2\n	((> ?vol 0)\n	 (vector? ?bco)\n	 (> ?tim2 ?tim1)))")
	(rhs "(let [nos (osm.data/filter-k \"name\" @osm.data/DATA)\n       nos (osm.data/filter-kv-not \"place\" \"island\" nos)\n       pls (osm.data/filter-k \"place\" nos)\n       nls (osm.data/filter-k \"natural\" nos)\n       ams (osm.data/filter-k \"amenity\" nos)\n       aes (osm.data/filter-k \"aeroway\" nos)\n       his (osm.data/filter-k \"highway\" nos)\n       was (osm.data/filter-k \"waterway\" nos)\n       tos (osm.data/filter-k \"tourism\" nos)]\n  (modify ?no place-list (vec (map #(get % \"name\") pls))\n	natural-list (vec (map #(get % \"name\") nls))\n	amenity-list (vec (map #(get % \"name\") ams))\n	aeroway-list (vec (map #(get % \"name\") aes))\n	highway-list (vec (map #(get % \"name\") his))\n	waterway-list (vec (map #(get % \"name\") was))\n	tourism-list (vec (map #(get % \"name\") tos))\n	time ?tim2)\n  (doseq [x pls]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	place (get x \"place\") time ?tim2))\n  (doseq [x nls]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	natural (get x \"natural\") time ?tim2))\n  (doseq [x ams]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	amenity (get x \"amenity\") time ?tim2))\n  (doseq [x aes]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	aeroway (get x \"aeroway\") time ?tim2))\n  (doseq [x his]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	highway (get x \"highway\") time ?tim2))\n  (doseq [x was]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	waterway (get x \"waterway\") time ?tim2))\n  (doseq [x tos]\n    (asser NamedObject title (get x \"name\") coord [(get x \"lat\") (get x \"lon\")]\n	tourism (get x \"tourism\") time ?tim2)))")
	(salience 1)
	(title "as:AssertNearbyObjects"))

([ProServer_Class260004] of  CloFunction

	(source "(filter #(not= (get % k) v) data)")
	(title "filter-kv-not [k v data]"))

([ProServer_Class260005] of  CloFuncall

	(source "(rete.core/log-lst \"beta-net-plan.txt\" rete.core/BPLAN) "))

([ProServer_Class260006] of  CloFuncall

	(source "(ru.rules/sp :all)"))

([ProServer_Class270000] of  CloFuncall

	(source "(ru.rules/f 3)"))

([ProServer_Class270001] of  Answer2

	(time 0))

([ProServer_Class270002] of  CloFuncall

	(source "(ru.rules/f 18)"))

([ProServer_Class280000] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [ProServer_Class110000])
	(%3ACREATION-TIMESTAMP "2016.05.14 12:20:43.780 MSK")
	(%3ACREATOR "ru"))

([ProServer_Class280001] of  CloFuncall

	(source "(map println (rete.core/facts-with-slot-value 'NamedObject 'place not= :?))"))

([ProServer_Class280002] of  CloFuncall

	(source "(map println (rete.core/facts-with-slot-value 'NamedObject 'natural not= :?))"))

([ProServer_Class280003] of  CloFuncall

	(source "(map println (rete.core/facts-with-slot-value 'NamedObject 'amenity not= :?))"))

([ProServer_Class280004] of  CloFuncall

	(source "(map println (rete.core/facts-with-slot-value 'NamedObject 'aeroway not= :?))"))

([ProServer_Class280005] of  CloFunction

	(source "(let [sta (for [t (tags @DATA)]\n	(let [fl (filter-k t @DATA)]\n	  [t (count fl)]))\n        sta  (filter #(> (second %) 0) sta)]\n  (sort second sta))")
	(title "tag-stat []"))

([ProServer_Class280006] of  CloFuncall

	(source "osm.data/tag-stat)"))

([ProServer_Class280007] of  CloFuncall

	(source "(osm.data/tag-stat)"))

([ProServer_Class290000] of  CloFuncall

	(source "(ru.rules/pp :all)"))

([ProServer_Class290001] of  CloFunction

	(source "(str kind \" \" tit (format \" (%.1f nm)\" dis))")
	(title "kind-tit-dis [[kind tit dis]]"))

([ProServer_Class3] of  WorkingPrograms

	(cloPrograms
		[Clojure_Class10000]
		[RuleEngine_Class30000]
		[ProServer_Class0]
		[ProServer_Class30001]
		[ProServer_Class40001]
		[ProServer_Class10000]
		[ProServer_Class160041]
		[ProServer_Class120000]
		[ProServer_Class90007]
		[ProServer_Class80003])
	(title "ProServer Working Programs"))

([ProServer_Class30000] of  Rule

	(lhs "(Answer2 place-list ?pll\n	natural-list ?nal\n	amenity-list ?aml)\n(Question predicate \"what-is\"\n	subject \"abaft the port beam\")\n(NamedObject title ?tit \n	side \"PORT-ABAFT\"\n	polar ?pol\n	place ?pla\n	natural ?nat\n	amenity ?ame)")
	(rhs "(cond\n  (some? ?pla) (vswap! ?pll conj [?pla ?tit (second ?pol)])\n  (some? ?nat) (vswap! ?nal conj [?nat ?tit (second ?pol)])\n  (some? ?ame) (vswap! ?aml conj [?ame ?tit (second ?pol)])\n  (some? ?aer) (vswap! ?aml conj [?aer ?tit (second ?pol)])\n  (some? ?hig) (vswap! ?aml conj [?hig ?tit (second ?pol)])\n  (some? ?wat) (vswap! ?aml conj [?wat ?tit (second ?pol)])\n  (some? ?tou) (vswap! ?aml conj [?tou ?tit (second ?pol)]))")
	(salience 0)
	(title "as:WhatIsPortAbaft_Obj"))

([ProServer_Class300000] of  CloFuncall

	(source "(in-ns 'osm.data)"))

([ProServer_Class300001] of  CloFuncall

	(source "(count @DATA)"))

([ProServer_Class300002] of  CloFuncall

	(source "(tags @DATA)"))

([ProServer_Class300003] of  CloFuncall

	(source "(map println tags @DATA)"))

([ProServer_Class300004] of  CloFuncall

	(source "(map println (tags @DATA))"))

([ProServer_Class30001] of  CloProgram

	(cloFunctions
		[ProServer_Class30003]
		[ProServer_Class30004]
		[ProServer_Class30005]
		[ProServer_Class30006]
		[ProServer_Class30007]
		[ProServer_Class30008]
		[ProServer_Class30009]
		[ProServer_Class30010]
		[ProServer_Class30011]
		[ProServer_Class30012]
		[ProServer_Class70001]
		[ProServer_Class90005])
	(cloNamespace [ProServer_Class30002])
	(title "Geo Calculus"))

([ProServer_Class30002] of  CloNamespace

	(title "geo.calc"))

([ProServer_Class30003] of  CloFunction

	(source "(let [cosphi1 (Math/cos phi1)\n        sinphi1 (Math/sin phi1)\n        cosaz (Math/cos az)\n        sinaz (Math/sin az)\n        sinc (Math/sin c)\n        cosc (Math/cos c)\n        phi2 (Math/asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n        lam2 (+ (Math/atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n    [phi2 lam2])")
	(title "spherical-between [^double phi1 ^double lambda0 ^double c ^double az]"))

([ProServer_Class30004] of  CloFunction

	(source "(let [pdiff (Math/sin (/ (- phi phi1) 2.0))\n        ldiff (Math/sin (/ (- lambda lambda0) 2.0))\n        rval (Math/sqrt (+ (* pdiff pdiff) (* (Math/cos phi1) (Math/cos phi) ldiff ldiff)))]\n    (* 2.0 (Math/asin rval)))")
	(title "spherical-distance [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([ProServer_Class30005] of  CloFunction

	(source "(let [ldiff (- lambda lambda0)\n        cosphi (Math/cos phi)]\n    (Math/atan2 (* cosphi (Math/sin ldiff))\n                  (- (* (Math/cos phi1) (Math/sin phi)) (* (Math/sin phi1) cosphi (Math/cos ldiff)))))")
	(title "spherical-azimuth [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([ProServer_Class30006] of  CloFunction

	(source "(let [phi (Math/toRadians lat)\n        lam (Math/toRadians lon)\n        dir (Math/toRadians crs)\n        way (* spd tim)\n        way (Math/toRadians (/ way 60))\n        [phi2 lam2] (spherical-between phi lam way dir)]\n    [(Math/toDegrees phi2) (Math/toDegrees lam2)])")
	(title "future-pos [[lat lon] crs spd tim]"))

([ProServer_Class30007] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n        ld1 (Math/toRadians lo1)\n        fi2 (Math/toRadians la2)\n        ld2 (Math/toRadians lo2)\n        rad (spherical-distance fi1 ld1 fi2 ld2)]\n    (* (Math/toDegrees rad) 60))")
	(title "distance-nm [[la1 lo1] [la2 lo2]]"))

([ProServer_Class30008] of  CloFunction

	(source "(let [fi1 (Math/toRadians la1)\n        ld1 (Math/toRadians lo1)\n        fi2 (Math/toRadians la2)\n        ld2 (Math/toRadians lo2)\n        rad (spherical-azimuth fi1 ld1 fi2 ld2)\n        deg (int (Math/toDegrees rad))]\n    (cond\n       (< deg 0) (+ deg 360)\n       (> deg 360) (- deg 360)\n       true deg))")
	(title "bear-deg [[la1 lo1] [la2 lo2]]"))

([ProServer_Class30009] of  CloFunction

	(source "(let [denom (- (* (- y4 y3) (- x2 x1)) (* (- x4 x3) (- y2 y1)))]\n    (if (not (== denom 0.0))\n      (let [ua (/ (- (* (- x4 x3) (- y1 y3)) (* (- y4 y3) (- x1 x3))) denom)\n            ub (/ (- (* (- x2 x1) (- y1 y3)) (* (- y2 y1) (- x1 x3))) denom)]\n        (if (and (<= 0.0 ua 1.0) (<= 0.0 ub 1.0))\n          [(+ y1 (* ua (- y2 y1))) (+ x1 (* ua (- x2 x1)))]))))")
	(title "seg-intersect [x1 y1 x2 y2 x3 y3 x4 y4]"))

([ProServer_Class30010] of  CloFunction

	(source "(let [rb (+ b 180)]\n    (if (> rb 360) (- rb 360) rb))")
	(title "rev-bear [b]"))

([ProServer_Class30011] of  CloFunction

	(source "(let [bea (bear-deg [lat1 lon1] [lat2 lon2])\n        ca1 (- bea crs)]\n    (cond\n     (> ca1 180) (- ca1 360)\n     (< ca1 -180) (+ ca1 360)\n     true ca1))")
	(title "course-angle [crs [lat1 lon1] [lat2 lon2]]"))

([ProServer_Class30012] of  CloFunction

	(source "(let [ca (course-angle crs crd1 crd2)]\n    (or (> ca 90) (< ca -90)))")
	(title "abaft [crs crd1 crd2]"))

([ProServer_Class310000] of  CloFuncall

	(source "(ru.rules/dr)"))

([ProServer_Class310001] of  CloFuncall

	(source "(ru.rules/pp 'NaturalObjects)"))

([ProServer_Class310002] of  CloFuncall

	(source "(rete.core/facts-with-slot-value 'NamedObject 'amenity = :?)"))

([ProServer_Class310003] of  CloFuncall

	(source "(rete.core/facts-with-slot-value 'NamedObject 'amenity not= :?)"))

([ProServer_Class310004] of  CloFuncall

	(source "(rete.core/facts-with-slot-value 'NamedObject 'aeroway not= :?)"))

([ProServer_Class310005] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'NamedObject 'aeroway not= :?))"))

([ProServer_Class310006] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'NamedObject 'highway not= :?))"))

([ProServer_Class310007] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'NamedObject 'waterway not= :?))"))

([ProServer_Class310008] of  CloFuncall

	(source "(count (rete.core/facts-with-slot-value 'NamedObject 'tourism not= :?))"))

([ProServer_Class310009] of  CloFuncall

	(source "(map println (rete.core/facts-with-slot-value 'NamedObject 'tourism not= :?))"))

([ProServer_Class310010] of  CloFuncall

	(source "(map println (rete.core/facts-with-slot-value 'NamedObject 'waterway not= :?))"))

([ProServer_Class40000] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(AdvisorSkipper)"))

([ProServer_Class40001] of  CloProgram

	(cloFunctions
		[ProServer_Class40002]
		[ProServer_Class40003]
		[ProServer_Class40004]
		[ProServer_Class40005])
	(cloNamespace [ProServer_Class40006])
	(title "Async Processing"))

([ProServer_Class40002] of  CloFunction

	(source "(when (not= @status-vol \"RUNNING\") \n  (vreset! status-vol \"RUNNING\")\n  (go (do \n          (while (and (= @status-vol \"RUNNING\")\n                          (or (nil? cond-func) (cond-func)))\n                (proc-func)\n                (<! (timeout time-out)))\n          (vreset! status-vol \"STOPPED\")))\n  @status-vol)")
	(title "start-proc [status-vol proc-func time-out cond-func]"))

([ProServer_Class40003] of  CloFunction

	(source "(vreset! status-vol \"STOP\")")
	(title "stop-proc [status-vol]"))

([ProServer_Class40004] of  CloFunction

	(source "(= @status-vol \"RUNNING\")")
	(title "running? [status-vol]"))

([ProServer_Class40005] of  CloFunction

	(source "(go (while true\n           (proc-func)\n           (<! (timeout time-out))))")
	(title "repeater [proc-func time-out]"))

([ProServer_Class40006] of  CloNamespace

	(source "(:require \n  [clojure.core.async :as async :refer [chan alts!! put! <! go timeout]])")
	(title "async.proc"))

([ProServer_Class50000] of  CloFunction

	(source "(letfn [(mov []\n            (doseq [[id bdt] (seq @BOATS)]\n              (let [man-func (partial mf id)]\n                (vswap! BOATS assoc id \n                  (-> bdt\n                    (move)\n                    (engine man-func)\n                    (helm man-func))))))]\n  (def add-func af)\n  (def rem-func rf)\n  (ap/start-proc mov-status #(mov) BOAT-TIO nil)\n  (println  \"Boats movement started..\"))")
	(title "start-boat-movement [mf af rf]"))

([ProServer_Class50001] of  OSMData

	(coord 0.0 0.0)
	(radius 6.0)
	(time 0)
	(volume 0))

([ProServer_Class50002] of  CloVar

	(source "(volatile! \"START\")")
	(title "mov-status"))

([ProServer_Class50003] of  CloFunction

	(source "(let [bdt {:coord coord\n               :course crs\n               :speed spd\n               :helm :steady\n               :engine spd\n               :time-from-turn 0\n               :turn-coord coord}]\n  (vswap! BOATS assoc id bdt)\n  (add-func id bdt))")
	(title "boat-add [id coord crs spd]"))

([ProServer_Class50004] of  CloFunction

	(source "(rem-func id (@BOATS id))\n(vswap! BOATS dissoc id)")
	(title "boat-rem [id]"))

([ProServer_Class60000] of  CloFunction

	(source "(vswap! BOATS assoc-in [id :helm] cmd)")
	(title "boat-helm [id cmd]"))

([ProServer_Class60001] of  CloFunction

	(source "(let [knots (max (min knots SPD-MAX) SPD-MIN)]\n  (vswap! BOATS assoc-in [id :engine] knots))")
	(title "boat-engine [id knots]"))

([ProServer_Class60002] of  NearbyIslands

	(time 0))

([ProServer_Class60003] of  CloFunction

	(source "(ap/stop-proc mov-status)")
	(title "stop-boat-movement []"))

([ProServer_Class70000] of  Rule

	(lhs "?a (Answer accum ?acc)\n(Question predicate \"what-is\"\n	subject \"behind the island\"\n	object ?tit1)\n(Island sector ?sec\n	title ?tit1\n	polar ?pol1)\n(Island sector ?sec\n	title ?tit2\n	polar ?pol2\n	(< (second ?pol1)\n	    (second ?pol2)))")
	(rhs "(vswap! ?acc conj [?tit2 (second ?pol2)])")
	(salience 0)
	(title "as:IslandsBehind"))

([ProServer_Class70001] of  CloFunction

	(source "(let [cr (- bea crs)\n       cr (if (< cr 0) (+ cr 360) cr)]\n  (inc (int (/ cr 30))))")
	(title "sector [bea crs]"))

([ProServer_Class70008] of  CloVar

	(source "nil")
	(title "rem-func"))

([ProServer_Class70009] of  CloVar

	(title "add-func"))

([ProServer_Class80000] of  CloFunction

	(source "(slurp (str ROOT \"index.html\"))")
	(title "index-page []"))

([ProServer_Class80001] of  Rule

	(lhs "?a2 (Answer2 time ?tim1)\n(Question time ?tim2\n	(> ?tim2 ?tim1))")
	(rhs "(modify ?a2 time ?tim2\n	place-list (volatile! [])\n	natural-list (volatile! [])\n	amenity-list (volatile! [])\n	aeroway-list (volatile! [])\n	highway-list (volatile! [])\n	waterway-list (volatile! [])\n	tourism-list (volatile! []))")
	(salience 1)
	(title "as:InitAnswer2"))

([ProServer_Class80002] of  Answer

	(time 0))

([ProServer_Class80003] of  CloProgram

	(cloFunctions
		[ProServer_Class80000]
		[ProServer_Class80018]
		[ProServer_Class80019]
		[ProServer_Class90003]
		[ProServer_Class80004]
		[ProServer_Class80017]
		[ProServer_Class230000]
		[ProServer_Class100000]
		[ProServer_Class90001]
		[ProServer_Class140002]
		[ProServer_Class240000]
		[ProServer_Class110004]
		[ProServer_Class80007]
		[ProServer_Class80008]
		[ProServer_Class80009]
		[ProServer_Class150000])
	(cloNamespace [ProServer_Class80016])
	(cloVars
		[ProServer_Class90000]
		[ProServer_Class80012]
		[ProServer_Class90002]
		[ProServer_Class80013]
		[ProServer_Class80014]
		[ProServer_Class80015]
		[ProServer_Class100001])
	(title "Pro Server"))

([ProServer_Class80004] of  CloFunction

	(source "(let [baos (ByteArrayOutputStream.)\n        w    (t/writer baos :json)\n        _    (t/write w x)\n        ret  (.toString baos)]\n    (.reset baos)\n    ret)")
	(title "write-transit [x]"))

([ProServer_Class80007] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (index-page))\n  (GET \"/map-center/\" [] (write-transit (map-center)))\n  (GET \"/chart/\" [] (write-transit (chart-connect)))\n  (GET \"/question/\" [& params] (question params))\n  (GET \"/answer/\" [] (answer))\n  (GET \"/events/\" [] (events))\n  (GET \"/maneuver/\" [& params] (maneuver params))\n  (GET \"/czml/\" [] (cz/events))\n  (route/files \"/\" (do (println [:ROOT-FILES ROOT]) {:root ROOT}))\n  (route/resources \"/\")\n  (route/not-found \"Not Found\"))\n\n(def APP\n  (handler/site app-routes))")
	(title "init-server []"))

([ProServer_Class80008] of  CloFunction

	(source "([]\n    (start-server PORT))\n([port]\n  (if (nil? APP)\n    (init-server))\n  (def SERV (jetty/run-jetty APP {:port port :join? false}))\n;;  (bm/start-boat-movement\n;;    #(pump-in-evt {:event :boat-maneuver :id %1 :data %2})\n;;    #(pump-in-evt {:event :boat-add :id %1 :data %2})\n;;    #(pump-in-evt {:event :boat-remove :id %1 :data %2})))\n   )")
	(title "start-server"))

([ProServer_Class80009] of  CloFunction

	(source "(when-let [serv SERV]\n  (bm/stop-boat-movement)\n  (.stop serv)\n  (def SERV nil)\n  (println \"Server stopped!\"))")
	(title "stop-server []"))

([ProServer_Class80012] of  CloVar

	(source "(chan)")
	(title "EVT-CHN"))

([ProServer_Class80013] of  CloVar

	(source "4444")
	(title "PORT"))

([ProServer_Class80014] of  CloVar

	(source "nil")
	(title "APP"))

([ProServer_Class80015] of  CloVar

	(source "nil")
	(title "SERV"))

([ProServer_Class80016] of  CloNamespace

	(source "(:use protege.core)\n(:require [ring.adapter.jetty :as jetty]\n              [ring.util.response :as r]\n              [compojure.core :refer [defroutes GET]]\n              [compojure.handler :as handler]\n              [compojure.route :as route]\n              [cognitect.transit :as t]\n              [clojure.core.async :as async :refer [chan alts!! put! <! <!! go timeout]]\n              [boat.mov :as bm]\n              [cesium.core :as cz]\n              [rete.core :as rete])\n(:import java.io.ByteArrayOutputStream)")
	(title "pro.server"))

([ProServer_Class80017] of  CloFunction

	(source "(-> (r/response (write-transit (deref (future (pump-out EVT-CHN)))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\"))")
	(title "events []"))

([ProServer_Class80018] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out [chn]"))

([ProServer_Class80019] of  CloFunction

	(source "(put! EVT-CHN val)")
	(title "pump-in-evt [val]"))

([ProServer_Class90000] of  CloVar

	(source "(str (System/getProperty \"user.dir\") \"/resources/public/\")")
	(title "ROOT"))

([ProServer_Class90001] of  CloFunction

	(source "(let [ans (deref (future (<!! ANS-CHN)))]\n  ;;(println [:ANS ans])\n  (-> (r/response (write-transit ans))\n        (r/header \"Access-Control-Allow-Origin\" \"*\")))")
	(title "answer []"))

([ProServer_Class90002] of  CloVar

	(source "(chan)")
	(title "ANS-CHN"))

([ProServer_Class90003] of  CloFunction

	(source "(put! ANS-CHN val)")
	(title "pump-in-ans [val]"))

([ProServer_Class90005] of  CloFunction

	(source "(condp = sector\n  1   \"AHEAD\"\n  2   \"STAR-BOW\"\n  3   \"STAR-BEAM\"\n  4   \"STAR-BEAM\"\n  5   \"STAR-ABAFT\"\n  6   \"ASTERN\"\n  7   \"ASTERN\"\n  8   \"PORT-ABAFT\"\n  9   \"PORT-BEAM\"\n  10 \"PORT-BEAM\"\n  11 \"PORT-BOW\"\n  12 \"AHEAD\")")
	(title "side [sector]"))

([ProServer_Class90006] of  Rule

	(lhs "?od (OSMData coord ?crd1\n	radius ?rad\n	volume ?vol \n	time ?tim1)\n(Question coord ?crd2\n	time ?tim2\n	((> ?tim2 ?tim1)\n	 [(= ?vol 0)\n	  ((vector? ?crd1)\n                           (vector? ?crd2) \n 	   (osm.data/obsolete ?crd1 ?crd2))]))")
	(rhs "(let [osm (osm.data/get-osm-data ?crd2 ?rad)\n       cnt (count osm)]\n  (println [:OSM-DATA cnt ?crd2 ?rad])\n  (modify ?od coord ?crd2\n	volume cnt \n	time (as/current-time)))")
	(salience 2)
	(title "as:CheckOSMData"))

([ProServer_Class90007] of  CloProgram

	(cloFunctions
		[ProServer_Class100011]
		[ProServer_Class170000]
		[ProServer_Class200018]
		[ProServer_Class290001]
		[ProServer_Class250001])
	(cloNamespace [ProServer_Class100008])
	(title "Advisor Skipper"))

([ProServer_Class90012] of  Rule

	(lhs "?ni (NearbyIslands time ?tim1)\n(Question coord ?bco\n	course ?crs)\n(OSMData volume ?vol \n	time ?tim2\n	((> ?vol 0)\n	 (vector? ?bco)\n	 (> ?tim2 ?tim1)))")
	(rhs "(let [ii (osm.data/filter-kv \"place\" \"island\" @osm.data/DATA)\n       nn (map #(or (get % \"name\") \"unk\") ii)]\n  (modify ?ni list (vec nn)\n	time ?tim2)\n  (doseq [i ii]\n    (let [ico [(get i \"lat\") (get i \"lon\")]\n           bea (geo.calc/bear-deg ?bco ico)\n           dis (geo.calc/distance-nm ?bco ico)\n           sec (geo.calc/sector bea ?crs)\n           sid (geo.calc/side sec)]\n      (asser Island title (get i \"name\")\n	coord ico\n	polar [bea dis]\n	sector sec\n	side sid\n	time ?tim2))))")
	(salience 1)
	(title "as:AssertNearbyIslands"))

([ProServer_Class90013] of  CloFunction

	(source "(let [d (/ rad 60)\n       bbx [(- lon d) (- lat d) (+ lon d) (+ lat d)]]\n  (vreset! DATA (osm-data bbx)))")
	(title "get-osm-data [[lat lon] rad]"))
